#
# The config is focused on the TUI based git tool,
# not full functional support of git.
#
# Config reference
# https://github.com/jonas/tig/blob/master/tigrc
# https://jonas.github.io/tig/doc/tigrc.5.html

# used for boosting loading speed
set commit-order = default
set main-options = -n 20000
set main-view-commit-title-graph = v1
set refresh-mode = after-command

# Addjust the column width of author
set main-view = line-number:no,interval=5 \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                author:full,width=15 id:yes \
                commit-title:yes,graph,refs,overflow=no
set blame-view = id:yes,color date:relative-compact \
                 file-name:no author:abbreviated \
                 line-number:yes,interval=1 text
set refs-view = line-number:no \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
				ref id:yes,color commit-title
set tree-view = line-number:no,interval=5 id:yes,color \
                mode author:full file-size \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                file-name

# Unbind keys {
bind generic f none
bind generic g none
bind generic y none
bind generic r none
bind generic l none
bind generic L none
bind generic d none
bind generic m none
bind generic c none
bind generic s none
bind generic S none
bind generic , none
bind generic p none
bind generic q none
bind generic b none
bind generic o none
# }

# Views {
## Functional
bind generic 1 view-main
bind generic l view-log
bind generic 2 view-refs
bind generic 3 view-status
bind generic 4 view-stash
bind generic 5 view-reflog

## Tools
bind generic df view-diff
bind generic sg view-stage
bind generic fd view-blob
bind generic bl view-blame
bind generic pg view-pager
bind generic rg view-grep

## Help
bind generic h view-help

## View config
bind generic O options
bind generic M maximize
# }

# Misc {
## Move light bar to top/button
bind generic G none
bind generic gg move-first-line
bind generic G move-last-line
bind main G move-last-line

## Close/Exit
bind generic q view-close-no-quit
bind generic Q quit

## Show CWD
bind generic cwd +git rev-parse --show-toplevel
# }

# Feature {
## Commit
bind main c<ENTER> >git commit
bind main ca >?git commit --amend
bind main cn @?git commit --amend --no-edit
bind stage c<ENTER> >git commit
bind stage ca >?git commit --amend
bind stage cn @?git commit --amend --no-edit
bind status c<ENTER> >git commit
bind status ca >?git commit --amend
bind status cn @?git commit --amend --no-edit

## Stage/Unstage file
bind stage f @sh -c 'if git diff --cached --quiet %(file); then git add %(file); else git reset --quiet HEAD %(file); fi'
bind stage F @sh -c 'if git diff --cached --quiet; then git add -u; else git reset --quiet HEAD; fi'

## Add stash
bind main ay @git stash save "%(prompt new stash: )"
bind stage ay @git stash save "%(prompt new stash: )"
bind status ay @git stash save "%(prompt new stash: )"

## Add/Del tag/branch
bind main at @git tag "%(prompt new tag: )" %(commit)
bind reflog at @git tag "%(prompt new tag: )" %(commit)
bind main dt @?git tag -d %(tag)
bind refs dt @?git tag -d %(tag)

bind main ab @git branch "%(prompt new branch: )" %(commit)
bind reflog ab @git branch "%(prompt new branch: )" %(commit)
bind main db @?git branch -D %(branch)
bind refs db @?git branch -D %(branch)

## Checkout
bind main co @git checkout %(commit)
bind refs co @git checkout %(commit)
bind reflog co @git checkout %(commit)

bind main cb @git checkout %(ref)
bind refs cb @git checkout %(ref)

bind main cd @git checkout -d %(ref)
bind refs cd @git checkout -d %(ref)

### Reset in reflog
bind reflog cd @git checkout -d %(commit)
### Reset file
bind status co @?git checkout %(file)

## Reset
bind main rh @?git reset --hard %(commit)
bind reflog rh @?git reset --hard %(commit)
bind main rs @?git reset %(commit)
bind reflog rs @?git reset %(commit)
bind main rn @?git reset --hard HEAD
bind stage rn @?git reset --hard HEAD
bind main rp @?git reset HEAD@{1}

## Cherry-pick
bind main cp @sh -c 'git cherry-pick -s %(commit) || git cherry-pick --abort'
bind refs cp @sh -c 'git cherry-pick -s %(commit) || git cherry-pick --abort'
bind reflog cp @sh -c 'git cherry-pick -s %(commit) || git cherry-pick --abort'

## Format patch
bind main fp ?+git format-patch -k --binary --histogram -1 -o . %(commit)
bind main fP ?+git format-patch -k --binary --histogram -o patchset %(commit)^
bind diff fp ?+git format-patch -k --binary --histogram -1 -o . %(commit)
bind blame fp ?+git format-patch -k --binary --histogram -1 -o . %(commit)
bind reflog fp ?+git format-patch -k --binary --histogram -1 -o . %(commit)
# }

# Stage {
bind stage A stage-update-part
bind stage a stage-update-line

# don't bind 'none' since 'none' would override 'view-xxxx'
bind stage 1 view-main
bind stage 2 view-refs
# }

# Status {
bind status C none
bind status ! none
bind status d @?rm -rf %(file)
bind status D @?git clean -fd
# }

# Reference {
bind refs C none
bind refs ! none

bind refs fa @git fetch --all
bind refs m<ENTER> @sh -c 'git merge %(ref) || git merge --abort'
bind refs rb @sh -c 'git rebase %(ref) || git rebase --abort'
# only available in FF
bind refs ps +?git fetch . HEAD:%(ref)
# }

# Main {
bind main C none
bind main ! none

bind main rv @sh -c 'git revert --no-edit %(commit) || git revert --abort'
bind main rb >?git rebase -i %(commit)
bind main ra >?git rebase --abort
bind main D @?git clean -fd
# }

# Reflog {
bind reflog C none
bind reflog ! none
# }
