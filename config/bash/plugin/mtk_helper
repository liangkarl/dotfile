#!/bin/bash
#
# build.conf example:
# kernel_lunch='aaa-userdebug'
# vendor_lunch='aaa-eng'
# system_lunch='aaa-user'
# kernel_dir='path/to/kernel'
#

usage() {
	local name
	name="${1:-$(basename $0 2>&-)}"

	cat << USAGE
EXTENSION SYNOPSIS:

	$name [-ak|ak|add-kernel config] [-av|av|add-vendor config] [-as|as|add-system config]
	$name [-ld|ld|load-default]
	$name [-l|l|list]

EXTENSION DESCRIPTION:

	ak, av, as - add lunch config of kernel, vendor or system, this option wouldn't
				 lunch config actually, only recording the config name. These lunch
				 configs would be activated when 'k' 'v' or 's' options is added.

	ld - load build.conf setup

	l - list current config and output dir location. Output dir only appreared after
		compile source codes.

EXTENSION EXAMPLE:

	$ $name ak vnd_qbert-userdebug	 # add kernel config
	$ $name l		  # show config and output info

USAGE
}

__mtk_check_var_define() {
	local list

	list=("kernel_lunch")
	list+=("vendor_lunch")
	list+=("system_lunch")
	for define_this in ${list[@]}; do
		if [[ "${!define_this+y}" != 'y' ]]; then
			return 0
		fi
	done
	return 1
}

__mtk_wrapper() {
	local -r build_conf='build.conf'
	local argv_list
	local make

	make=$(which mtk-make)
	if [[ -z "$make" ]]; then
		echo "require 'mtk-make' executable script" 2>&-
		return 256
	fi

	# check input parameters
	if (( $# == 0 )); then
		eval "$make -h"
		usage mtk-make
		return 254
	fi

	# check required varialbes
	if __mtk_check_var_define; then
		if source $build_conf 2>&-; then
			echo "loaded $(readlink -e $build_conf)"
		else
			echo "no necessary varialbes" >&2
		fi
	fi

	# export required variables
	export kernel_lunch vendor_lunch system_lunch
	export kernel_out_dir vendor_out_dir system_out_dir
	export kernel_dir

	# parse options
	while (( $# != 0 )); do
		case "$1" in
			ak|-ak|add-kernel)
				shift
				export kernel_lunch="$1"
				export kernel_out_dir=''
				echo "kernel lunch: $kernel_lunch"
				;;
			av|-av|add-vendor)
				shift
				export vendor_lunch="$1"
				export vendor_out_dir=''
				echo "vendor lunch: $vendor_lunch"
				;;
			as|-as|add-system)
				shift
				export system_lunch="$1"
				export system_out_dir=''
				echo "system lunch: $system_lunch"
				;;
			ld|-ld|load-default)
				if source $build_conf 2>&-; then
					echo "loaded $(readlink -e $build_conf)"
				fi
				return 0
				;;
			l|-l|list)
				echo "List lunch config:"
				echo "kernel: $kernel_lunch"
				echo "vendor: $vendor_lunch"
				echo "system: $system_lunch"
				return 0
				;;
			*)
				argv_list+=" $1"
		esac
		shift
	done

	eval $make $argv_list
}

alias mtk-make='__mtk_wrapper'
complete -F _lunch mtk-make 2>&-
