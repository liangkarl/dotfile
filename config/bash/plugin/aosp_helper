#!/bin/bash

# Assume user has source envsetup.sh already
# $0 KERNEL_DIR KERNEL_OBJ_DIR
setup_kernel_cmddb() {
    local -r build_conf='build.conf'
    local kernel_dir kernel_obj_dir
    local android_dir
    local gen_db_py compile_db

    if [[ -e "$build_conf" ]]; then
        source $build_conf
    fi

    kernel_dir="${1:-$kernel_dir}"
    if [[ ! -e "$kernel_dir" ]]; then
        echo "invalid kernel dir path: $kernel_dir"
        return 128
    fi
    kernel_dir=$(readlink -e $kernel_dir)

    kernel_obj_dir="$2"
    if [[ -z "$kernel_obj_dir" ]]; then
        if [[ -z "$ANDROID_PRODUCT_OUT" ]]; then
            if [[ -z "$kernel_lunch" ]] || [[ -z "$(declare -F lunch)" ]]; then
                echo "no lunch config?" >&2
                return 128
            fi
            lunch $kernel_lunch
        fi
        kernel_obj_dir=${ANDROID_PRODUCT_OUT}/obj/KERNEL_OBJ
    fi

    cd $kernel_dir
    echo "linux kernel build out dir: $kernel_obj_dir"
    echo "linux kernel dir: $kernel_dir"
    echo "-------------------------------------------------------------------"

    echo "Link build dir."
    ln -svf $kernel_obj_dir build
    cd - &> /dev/null

    gen_db_py=gen_compile_commands.py
    for dir in "$(pwd)" "$kernel_dir/scripts" "$SHELL_DIR/tools/cmd_db"; do
        [ -e $dir/$gen_db_py ] && {
            gen_db_py=$dir/$gen_db_py
            break
        }
    done

    [ ! -e $gen_db_py ] && {
        echo "no $gen_db_py to continue" >&2
        return 128
    }

    cp $gen_db_py $kernel_obj_dir
    gen_db_py=$(basename $gen_db_py)

    compile_db=compile_commands.json
    cd $kernel_obj_dir
    echo "generate compile commands db..."
    chmod +x $gen_db_py
    ./$gen_db_py

    echo "replace file pathes"
    sed -i "s|$kernel_obj_dir|$kernel_dir|g" $compile_db
    sed -i 's/[ \t]*$//g' $compile_db

    echo "copy commands db to $kernel_dir/$compile_db"
    cp -f $compile_db $kernel_dir
    cd - &> /dev/null
}

# create a cmd_db here
# link_cmdb PLACE PROJECT_LIST
create_cmd_db() {
    local -r cmd_db='compile_commands.json'

    if [[ -z "$1" ]]; then
        return 128
    fi

    local cmd_db_loc rel_cmd_db
    local rel_cmd_db rel_copy_cmd_db
    local wanted_place
    local dir

    rel_copy_cmd_db='cmd-db'
    cmd_db_loc=()
    cmd_db_loc+=("out/soong/development/ide/compdb")
    cmd_db_loc+=("out/development/ide/compdb")

    for dir in ${cmd_db_loc[@]}; do
        if [[ -e $dir/$cmd_db ]]; then
            rel_cmd_db="$dir/$cmd_db"
        fi
    done

    if [[ -z $rel_cmd_db ]]; then
        echo "no available $cmd_db"
        return 0
    fi


    # 1st stage
    # copy command DB
    if [[ ! -e $rel_copy_cmd_db ]]; then
        mkdir $rel_copy_cmd_db
    fi

    wanted_place="$(readlink -f "$rel_copy_cmd_db/$1")"
    rel_copy_cmd_db="$wanted_place/$cmd_db"

    if [[ ! -e $wanted_place ]]; then
        mkdir -p $wanted_place
    elif [[ -e "$rel_copy_cmd_db" ]]; then
        if diff $rel_copy_cmd_db $rel_cmd_db; then
            echo "command database: $rel_copy_cmd_db"
            return 0
        fi
    fi

    cp $rel_cmd_db $wanted_place
    echo "command database: $rel_copy_cmd_db"

    # 2nd stage
    # create .ccls for projects
    shift
    if (( $# == 0 )); then
        return 0
    fi

    local projects size
    local dot_ccls ccls_config
    local i

    dot_ccls='.ccls'
    ccls_config="{\"compilationDatabaseDirectory\": \"$rel_copy_cmd_db\"}"

    projects=("$@")
    size=${#projects[@]}
    echo "create $dot_ccls for $size project(s)"
    for ((i = 0; i < size; i++)); do
        if [[ -e ${projects[$i]} ]]; then
            echo $ccls_config > ${projects[$i]}/$dot_ccls
        else
            echo "no found: ${projects[$i]}"
        fi
    done
    echo "done"

    return 0
}
