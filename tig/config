#
# The config is focused on the TUI based git tool,
# not full functional support of git.
#
# Config reference
# https://github.com/jonas/tig/blob/master/tigrc
# https://jonas.github.io/tig/doc/tigrc.5.html

# used for boosting loading speed
set main-options = -n 20000
set diff-options = --patience
set log-options  = --patience -p

set commit-order = default
set main-view-commit-title-graph = v1
set refresh-mode = after-command

# Addjust the column width of author
set main-view = line-number:no,interval=5 \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                author:full,width=15 id:yes \
                commit-title:yes,graph,refs,overflow=no
set blame-view = id:yes,color date:relative-compact \
                 file-name:no author:abbreviated \
                 line-number:yes,interval=1 text
set refs-view = line-number:no \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
				ref id:yes,color commit-title
set tree-view = line-number:no,interval=5 id:yes,color \
                mode author:full file-size \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                file-name

# Unbind keys {
bind generic f none
bind generic g none
bind generic y none
bind generic r none
bind generic l none
bind generic L none
bind generic d none
bind generic m none
bind generic s none
bind generic S none
bind generic , none
bind generic p none
bind generic q none
bind generic b none
bind generic o none
bind generic w none
bind generic t none
bind generic <Ctrl-C> none
bind generic - none
# }

# Views {
## Functional
bind generic 0  view-main
bind generic 9  view-reflog
bind generic 8  view-log
bind generic 1  view-status
bind generic 2  view-refs
bind generic 3  view-stash
bind generic B  view-blame
bind generic T  view-tree
bind generic -g view-grep

bind stage   1  none
bind stage   2  none
bind main    H  view-help

# 0 -> 1 -> 2 -> 3 -> 8 -> 9 -> 0
# main -> status -> refs -> stash -> log -> reflog -> main
bind main   , view-status
bind status , view-refs
bind refs   , view-stash
bind stash  , view-log
bind log    , view-reflog
bind reflog , view-main

bind main   . view-reflog
bind reflog . view-log
bind log    . view-stash
bind stash  . view-refs
bind refs   . view-status
bind status . view-main

bind tree   , view-blob
bind blob   , view-blame
bind blame  , view-tree

bind tree   . view-blame
bind blame  . view-blob
bind blob   . view-tree

## Force refresh view
bind main   = <tig
bind status = <tig status
bind refs   = <tig refs
bind stash  = <tig stash
bind log    = <tig log
bind reflog = <tig reflog
bind blame  = <tig blame %(file)
bind diff   = <tig show %(commit)
bind stage  = <tig

## Blame format
bind blame -<ENTER> <tig blame -w -C -C -C %(file)
bind blame -f       <tig --no-merges -- %(file)

## Diff format
bind diff  -<ENTER> :set diff-options = --patience --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol --ignore-space-at-eol --ignore-space-change
bind diff  -f       <tig --no-merges -- %(file)
bind diff  -b       <tig blame %(file)

## Stage format
bind stage -<ENTER> :set diff-options = --patience --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol --ignore-space-at-eol --ignore-space-change
bind stage -f       <tig --no-merges -- %(file)
bind stage -b       <tig blame %(file)

## Main format
bind main  -<ENTER> <tig --no-merges
bind main  -a       <tig --no-merges --author="%(prompt search author name: )"

## Refs format
bind refs  -b       <tig refs --branches
bind refs  -t       <tig refs --tags
bind refs  -r       <tig refs --remotes

## tree/blob format
bind blob  -f       <tig --no-merges -- %(file)
bind tree  -f       <tig --no-merges -- %(file)

# Log format
bind log   -<ENTER> :set log-options = --patience -p --no-merges --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol --ignore-space-at-eol --ignore-space-change
bind log   -a       <tig log --no-merges --author="%(prompt search author name: )"
bind log   -f       <tig log -- "%(file)"

## Options
bind generic o  none
bind generic os :toggle sort-field
bind generic od :toggle date
bind generic oa :toggle author
bind generic oi :toggle id
bind generic og :toggle graph
bind generic of :toggle file-name
bind generic oF :toggle file-filter
bind generic op :toggle ignore-space
bind generic or :toggle commit-title-refs
# }

# Misc {
## Move light bar to top/button
bind generic g  none
bind generic gg move-first-line
bind generic G  move-last-line
bind main    G  move-last-line

bind generic l  enter
bind generic q  view-close-no-quit
bind generic J  next
bind generic K  previous
bind generic Q  quit
bind generic <Ctrl-r> <tig
bind diff    l  scroll-right
bind diff    h  scroll-left
bind stage   l  scroll-right
bind stage   h  scroll-left
bind blame   l  scroll-right
bind blame   h  scroll-left
bind grep    l  scroll-right
bind grep    h  scroll-left
bind blob    l  scroll-right
bind blob    h  scroll-left

bind generic ;  +git rev-parse --show-toplevel

bind generic yy +tig.run copy %(commit)
bind generic yf +tig.run copy %(file)
# }

# TODO:
# c: commit
# s: stash
# b: branch
# t: tag
# p: patch / push / pull / fetch
# r: rebase / merge

# Feature {
## Commit
bind generic c        none
bind main    c<ENTER>  >git commit -v
bind main    ca       >?git commit -v --amend
bind main    cn       @?git commit --amend --no-edit
bind stage   c<ENTER>  >git commit -v
bind stage   ca       >?git commit -v --amend
bind stage   cn       @?git commit --amend --no-edit
bind status  c<ENTER>  >git commit -v
bind status  ca       >?git commit -v --amend
bind status  cn       @?git commit --amend --no-edit

## Stage/Unstage file
bind stage   f<Enter> @tig.run stage_file "%(file)"
bind stage   fa       @tig.run stage_file

## Add stash
bind main    sa        @tig.run git.stash "%(prompt new stash: )"
bind main    s<Enter>  @tig.run git.stash
bind main    sp       :!tig.run git.full stash pop stash@{0}
bind stage   sa        @tig.run git.stash save "%(prompt new stash: )"
bind stage   s<Enter>  @tig.run stash
bind stage   sp       :!tig.run git.full stash pop stash@{0}
bind status  sa        @tig.run git.stash save "%(prompt new stash: )"
bind status  s<Enter>  @tig.run stash
bind status  sp       :!tig.run git.full stash pop stash@{0}

## Add/Remove/Move tag and branch
bind main   ta       @tig.run git.quiet tag "%(prompt new tag: )" %(commit)
bind main   t<ENTER> @tig.run git.quiet tag tag.$(git rev-parse --short %(commit)) %(commit)
bind main   ba       @tig.run git.quiet branch "%(prompt new branch: )" %(commit)
bind main   b<ENTER> @tig.run git.quiet branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)
bind main   a<ENTER> @tig.run add "%(commit)"
bind main   d<ENTER> @tig.run del "%(commit)"
bind reflog ta       @tig.run git.quiet tag "%(prompt new tag: )" %(commit)
bind reflog t<ENTER> @tig.run git.quiet tag tag.$(git rev-parse --short %(commit)) %(commit)
bind reflog ba       @tig.run git.quiet branch "%(prompt new branch: )" %(commit)
bind reflog b<ENTER> @tig.run git.quiet branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)
bind reflog a<ENTER> @tig.run add "%(commit)"
bind reflog d<ENTER> @tig.run del "%(commit)"
bind diff   ta       @tig.run git.quiet tag "%(prompt new tag: )" %(commit)
bind diff   t<ENTER> @tig.run git.quiet tag tag.$(git rev-parse --short %(commit)) %(commit)
bind diff   ba       @tig.run git.quiet branch "%(prompt new branch: )" %(commit)
bind diff   b<ENTER> @tig.run git.quiet branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)
bind diff   a<ENTER> @tig.run add "%(commit)"
bind diff   d<ENTER> @tig.run del "%(commit)"
bind refs   ta       @tig.run git.quiet tag "%(prompt new tag: )" HEAD
bind refs   t<ENTER> @tig.run git.quiet tag tag.$(git rev-parse --short HEAD) HEAD
bind refs   ba       @tig.run git.quiet branch "%(prompt new branch: )" HEAD
bind refs   b<ENTER> @tig.run git.quiet branch branch.$(basename $(git rev-parse --show-toplevel)) HEAD
bind refs   a<ENTER> @tig.run add "%(commit)"
bind refs   d<ENTER> @tig.run del "%(commit)"

## Checkout
bind main   co  +tig.run git.full checkout %(commit)
bind refs   co  +tig.run git.full checkout %(ref)
bind reflog co  +tig.run git.full checkout %(commit)
bind status co +?tig.run git.full checkout %(file)
bind stage  co +?tig.run git.full checkout %(file)
bind stage  ct +?tig.run git.full checkout --theirs %(file)
bind stage  cu +?tig.run git.full checkout --ours %(file)
bind diff   co +?tig.run git.full checkout %(file)

### File Operation
bind main   dc       +?tig.run git.quiet clean -fd
bind status d<Enter> @?rm -rf %(file)
bind status dd       @?rm -rf $(dirname %(file))
bind status dc       +?tig.run git.quiet clean -fd
bind stage  d<Enter> @?rm -rf %(file)
bind stage  dd       @?rm -rf $(dirname %(file))
bind stage  dc       +?tig.run git.quiet clean -fd
bind diff   d<Enter> @?rm -rf %(file)
bind diff   dd       @?rm -rf $(dirname %(file))

## Reset commits
bind main    rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind reflog  rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind diff    rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind main    rs +sh -c '[[ "%(prompt enter "y" to reset: )" == "y" ]] && git reset %(commit)'
bind reflog  rs +sh -c '[[ "%(prompt enter "y" to reset: )" == "y" ]] && git reset %(commit)'
bind diff    rs +sh -c '[[ "%(prompt enter "y" to reset: )" == "y" ]] && git reset %(commit)'
bind stage   rn +sh -c '[[ "%(prompt enter "y" to hard reset HEAD: )" == "y" ]] && git reset --hard'
bind main    rn +sh -c '[[ "%(prompt enter "y" to hard reset HEAD: )" == "y" ]] && git reset --hard'
bind main    rp +sh -c '[[ "%(prompt enter "y" to reset HEAD@{1}: )" == "y" ]] && git reset HEAD@{1}'

## Cherry-pick
bind main   cp :!tig.run git.rcv cherry-pick -s %(commit)
bind refs   cp :!tig.run git.rcv cherry-pick -s %(commit)
bind reflog cp :!tig.run git.rcv cherry-pick -s %(commit)
bind diff   cp :!tig.run git.rcv cherry-pick -s %(commit)

## Format patch {
bind main   ps       @tig.run patch.add %(commit)
bind main   p<Enter> +tig.run patch.create
bind main   p1       +tig.run git.full format-patch -k --binary --histogram -o .patch -1 %(commit)
bind main   pn       +tig.run git.full format-patch -k --binary --histogram -o .patch %(commit)^
bind main   pr       @tig.run patch.reset
bind diff   ps       @tig.run patch.add %(commit)
bind diff   p<Enter> +tig.run patch.create
bind diff   p1       +tig.run git.full format-patch -k --binary --histogram -o .patch -1 %(commit)
bind diff   pn       +tig.run git.full format-patch -k --binary --histogram -o .patch %(commit)^
bind diff   pf       +tig.run git.full format-patch -k --binary --histogram -o .patch %(commit) %(file)
bind diff   pr       @tig.run patch.reset
bind log    ps       @tig.run patch.add %(commit)
bind log    p<Enter> +tig.run patch.create
bind log    p1       +tig.run git.full format-patch -k --binary --histogram -o .patch -1 %(commit)
bind log    pn       +tig.run git.full format-patch -k --binary --histogram -o .patch %(commit)^
bind log    pf       +tig.run git.full format-patch -k --binary --histogram -o .patch %(commit) %(file)
bind log    pr       @tig.run patch.reset
bind reflog ps       @tig.run patch.add %(commit)
bind reflog p<Enter> +tig.run patch.create
bind reflog p1       +tig.run git.full format-patch -k --binary --histogram -o .patch -1 %(commit)
bind reflog pr       @tig.run patch.reset
bind blame  p1       +tig.run git.full format-patch -k --binary --histogram -o .patch -1 %(commit)
bind stage  p1       @tig.run git.quiet diff --output=$(date +%y%m%d%H%M%S).diff --binary --histogram
bind stage  pf       @tig.run git.quiet diff --output=$(date +%y%m%d%H%M%S)_$(basename %(file)).diff --binary --histogram %(file)
# }

# Stage {
bind stage A stage-update-part
bind stage a stage-update-line
# }

# Status {
bind status C none
bind status ! none
# }

# Reference {
bind refs C none
bind refs ! none

bind refs s<ENTER> :!tig.run save "%(commit),%(branch),%(refname),%(tag),%(file)"
bind refs f<ENTER> :!tig.run git.full fetch --prune --all
bind refs rb       :!tig.run git.rcv rebase %(commit)
bind refs pp       !?tig.run push "%(commit)"
bind refs pb       !?tig.run push.create "%(branch)"
bind refs pt       !?tig.run push.create "%(tag)"
bind refs cs        +tig.run clean
# }

# Main {
bind main C none
bind main ! none

bind main bs +?tig.run git.full bisect start
bind main bg +?tig.run git.full bisect good %(commit)
bind main bb +?tig.run git.full bisect bad %(commit)
bind main rv :!tig.run git.rcv revert --no-edit %(commit)
bind diff rv :!tig.run git.rcv revert --no-edit %(commit)
bind main rb >?git rebase -i %(commit)
bind main rk >?git rebase --skip
# progress stop: rebase, merge, revert, cherry-pick, bisect
bind main pa  +?tig.run abort
# progress continue: rebase, merge, revert, cherry-pick, bisect
bind main pc !?tig.run going
# progress info
bind main pi +tig.run progress
bind main pp !?tig.run push %(commit)
bind main <SingleQuote> :!tig.run commit_report
# }

# Log {
# }

# Reflog {
bind reflog C none
bind reflog ! none
# }

# Pager {
bind pager <Space> view-close-no-quit
# }
