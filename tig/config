#
# The config is focused on the TUI based git tool,
# not full functional support of git.
#
# Config reference
# https://github.com/jonas/tig/blob/master/tigrc
# https://jonas.github.io/tig/doc/tigrc.5.html

# used for boosting loading speed
set commit-order = default
set main-options = -n 20000
set main-view-commit-title-graph = v1
set refresh-mode = after-command
set log-options = -p

# Addjust the column width of author
set main-view = line-number:no,interval=5 \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                author:full,width=15 id:yes \
                commit-title:yes,graph,refs,overflow=no
set blame-view = id:yes,color date:relative-compact \
                 file-name:no author:abbreviated \
                 line-number:yes,interval=1 text
set refs-view = line-number:no \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
				ref id:yes,color commit-title
set tree-view = line-number:no,interval=5 id:yes,color \
                mode author:full file-size \
                date:custom,format="%m/%d/%y %H:%M" date:relative-compact \
                file-name

# Unbind keys {
bind generic f none
bind generic g none
bind generic y none
bind generic r none
bind generic l none
bind generic L none
bind generic d none
bind generic m none
bind generic s none
bind generic S none
bind generic , none
bind generic p none
bind generic q none
bind generic b none
bind generic o none
bind generic w none
bind generic t none
bind generic / none
bind generic <Ctrl-C> none
# }

# Views {
## Functional
bind generic 0  view-main
bind generic 9  view-reflog
bind generic 8  view-log
bind generic 1  view-status
bind generic 2  view-refs
bind generic 3  view-stash
bind generic B  view-blame
bind generic T  view-tree
bind generic /g view-grep
bind generic H  view-help

bind stage   1  none
bind stage   2  none
bind main    H  view-help

# 0 -> 1 -> 2 -> 3 -> 8 -> 9 -> 0
# main -> status -> refs -> stash -> log -> reflog -> main
bind main   , view-status
bind status , view-refs
bind refs   , view-stash
bind stash  , view-log
bind log    , view-reflog
bind reflog , view-main

bind main   . view-reflog
bind reflog . view-log
bind log    . view-stash
bind stash  . view-refs
bind refs   . view-status
bind status . view-main

bind tree   , view-blob
bind blob   , view-blame
bind blame  , view-tree

bind tree   . view-blame
bind blame  . view-blob
bind blob   . view-tree

## Options
bind generic o  none
bind generic os :toggle sort-field
bind generic od :toggle date
bind generic oa :toggle author
bind generic oi :toggle id
bind generic og :toggle graph
bind generic of :toggle file-name
bind generic oF :toggle file-filter
bind generic op :toggle ignore-space
bind generic or :toggle commit-title-refs
# }

# Misc {
## Move light bar to top/button
bind generic // search
bind generic g  none
bind generic gg move-first-line
bind generic G  move-last-line
bind main    G  move-last-line

bind generic l  enter
bind generic h  view-close-no-quit
bind generic q  view-close-no-quit
bind generic J  next
bind generic K  previous
bind generic Q  quit
bind generic <Ctrl-r> <tig

bind generic ;  +git rev-parse --show-toplevel

bind generic yy +sh -c 'tig.cmd copy %(commit)'
bind generic yf +sh -c 'tig.cmd copy %(file)'
bind generic /a >!tig --no-merges --author="%(prompt search author name: )"
bind generic /f >!tig -- "%(file)"
# }

# TODO:
# c: commit
# s: stash
# b: branch
# t: tag
# p: patch / push / pull / fetch
# r: rebase / merge

# Feature {
## Commit
bind generic c        none
bind main    c<ENTER> >git commit -v
bind main    ca       >?git commit -v --amend
bind main    cn       @?git commit --amend --no-edit
bind stage   c<ENTER> >git commit -v
bind stage   ca       >?git commit -v --amend
bind stage   cn       @?git commit --amend --no-edit
bind status  c<ENTER> >git commit -v
bind status  ca       >?git commit -v --amend
bind status  cn       @?git commit --amend --no-edit

## Stage/Unstage file
bind stage   f<Enter> @sh -c 'tig.cmd stage_file "%(file)"'
bind stage   fa       @sh -c 'tig.cmd stage_file'

## Add stash
bind main    sa       @git stash save "%(prompt new stash: )"
bind main    s<Enter> @sh -c 'tig.cmd stash'
bind main    sp       @sh -c 'tig.cmd cmd stash pop stash@{0}'
bind stage   sa       @git stash save "%(prompt new stash: )"
bind stage   s<Enter> @sh -c 'tig.cmd stash'
bind stage   sp       @sh -c 'tig.cmd cmd stash pop stash@{0}'
bind status  sa       @git stash save "%(prompt new stash: )"
bind status  s<Enter> +sh -c 'tig.cmd stash'
bind status  sp       +sh -c 'tig.cmd cmd stash pop stash@{0}'

## Add/Remove/Move tag and branch
bind main   ta       @sh -c 'tig.cmd cmd tag "%(prompt new tag: )" %(commit)'
bind main   t<ENTER> @sh -c 'tig.cmd cmd tag tag.$(git rev-parse --short %(commit)) %(commit)'
bind main   ba       @sh -c 'tig.cmd cmd branch "%(prompt new branch: )" %(commit)'
bind main   b<ENTER> @sh -c 'tig.cmd cmd branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)'
bind main   a<ENTER> @sh -c 'tig.cmd add "%(commit)"'
bind main   d<ENTER> @sh -c 'tig.cmd del "%(commit)"'
bind reflog ta       @sh -c 'tig.cmd cmd tag "%(prompt new tag: )" %(commit)'
bind reflog t<ENTER> @sh -c 'tig.cmd cmd tag tag.$(git rev-parse --short %(commit)) %(commit)'
bind reflog ba       @sh -c 'tig.cmd cmd branch "%(prompt new branch: )" %(commit)'
bind reflog b<ENTER> @sh -c 'tig.cmd cmd branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)'
bind reflog a<ENTER> @sh -c 'tig.cmd add "%(commit)"'
bind reflog d<ENTER> @sh -c 'tig.cmd del "%(commit)"'
bind diff   ta       @sh -c 'tig.cmd cmd tag "%(prompt new tag: )" %(commit)'
bind diff   t<ENTER> @sh -c 'tig.cmd cmd tag tag.$(git rev-parse --short %(commit)) %(commit)'
bind diff   ba       @sh -c 'tig.cmd cmd branch "%(prompt new branch: )" %(commit)'
bind diff   b<ENTER> @sh -c 'tig.cmd cmd branch branch.$(basename $(git rev-parse --show-toplevel)) %(commit)'
bind diff   a<ENTER> @sh -c 'tig.cmd add "%(commit)"'
bind diff   d<ENTER> @sh -c 'tig.cmd del "%(commit)"'
bind refs   ta       @sh -c 'tig.cmd cmd tag "%(prompt new tag: )" HEAD'
bind refs   t<ENTER> @sh -c 'tig.cmd cmd tag tag.$(git rev-parse --short HEAD) HEAD'
bind refs   ba       @sh -c 'tig.cmd cmd branch "%(prompt new branch: )" HEAD'
bind refs   b<ENTER> @sh -c 'tig.cmd cmd branch branch.$(basename $(git rev-parse --show-toplevel)) HEAD'
bind refs   a<ENTER> @sh -c 'tig.cmd add "%(commit)"'
bind refs   d<ENTER> @sh -c 'tig.cmd del "%(commit)"'

## Checkout
bind main   co +sh -c 'git checkout %(commit)'
bind refs   co +sh -c 'git checkout %(ref)'
bind refs   cd +sh -c 'git checkout -d %(ref)'
bind reflog co +sh -c 'git checkout %(commit)'

### Reset file
bind status co @?git checkout %(file)
bind stage  co @?git checkout %(file)

## Reset commits
bind main    rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind reflog  rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind diff    rh +sh -c '[[ "%(prompt enter "y" to hard reset: )" == "y" ]] && git reset --hard %(commit)'
bind main    rh +sh -c '[[ "%(prompt enter "y" to soft reset: )" == "y" ]] && git reset %(commit)'
bind reflog  rh +sh -c '[[ "%(prompt enter "y" to soft reset: )" == "y" ]] && git reset %(commit)'
bind diff    rh +sh -c '[[ "%(prompt enter "y" to soft reset: )" == "y" ]] && git reset %(commit)'
bind stage   rh +sh -c '[[ "%(prompt enter "y" to hard reset HEAD: )" == "y" ]] && git reset --hard'
bind main    rh +sh -c '[[ "%(prompt enter "y" to hard reset HEAD: )" == "y" ]] && git reset --hard'
bind main    rp +sh -c '[[ "%(prompt enter "y" to hard reset HEAD@{1}: )" == "y" ]] && git reset HEAD@{1}'

## Cherry-pick
bind main   cp +sh -c 'tig.cmd cmd cherry-pick -s %(commit)'
bind refs   cp +sh -c 'tig.cmd cmd cherry-pick -s %(commit)'
bind reflog cp +sh -c 'tig.cmd cmd cherry-pick -s %(commit)'
bind diff   cp +sh -c 'tig.cmd cmd cherry-pick -s %(commit)'

## Format patch {
bind main   ps       @sh -c 'tig.cmd choose patch %(commit)'
bind main   p<Enter> +sh -c 'tig.cmd patch.create'
bind main   p1       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch -1 %(commit)'
bind main   pn       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch %(commit)^'
bind main   pr       @sh -c 'tig.cmd patch.reset'
bind diff   ps       @sh -c 'tig.cmd choose patch %(commit)'
bind diff   p<Enter> +sh -c 'tig.cmd patch.create'
bind diff   p1       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch -1 %(commit)'
bind diff   pn       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch %(commit)^'
bind diff   pf       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch %(commit) %(file)'
bind diff   pr       @sh -c 'tig.cmd patch.reset'
bind reflog ps       @sh -c 'tig.cmd choose patch %(commit)'
bind reflog p<Enter> +sh -c 'tig.cmd patch.create'
bind reflog p1       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch -1 %(commit)'
bind reflog pr       @sh -c 'tig.cmd patch.reset'
bind blame  p1       +sh -c 'tig.cmd cmd format-patch -k --binary --histogram -o .patch -1 %(commit)'
bind stage  p1       @sh -c 'tig.cmd cmd.out $(date +%y%m%d%H%M%S%H%M).diff diff -k --binary --histogram'
bind stage  pf       @sh -c 'tig.cmd cmd.out $(date +%y%m%d%H%M%S)-$(basename %(file)).diff diff -k --binary --histogram %(file)'
# }

# Stage {
bind stage A stage-update-part
bind stage a stage-update-line
# }

# Status {
bind status C none
bind status ! none
bind status d<Enter> @?rm -rf %(file)
bind status dd       @?sh -c 'rm -rf $(dirname %(file))'
bind status D        +?sh -c 'tig.cmd cmd clean -fd'
# }

# Reference {
bind refs C none
bind refs ! none

bind refs f<ENTER> +sh -c 'tig.cmd cmd fetch --prune'
bind refs m<ENTER> +sh -c 'tig.cmd cmd.rcv merge %(commit)'
bind refs rb       +sh -c 'tig.cmd cmd.rcv rebase %(commit)'
bind refs su       !sh -c 'tig.cmd choose push %(commit) %(refname)'
bind refs sm       +sh -c 'tig.cmd choose rebase %(commit) %(refname)'
bind refs sr       +sh -c 'tig.cmd choose merge %(commit) %(refname)'
bind refs sc       +sh -c 'tig.cmd choose clean'
# }

# Main {
bind main C none
bind main ! none

bind main bs +sh -c 'tig.cmd cmd bisect start'
bind main bg +sh -c 'tig.cmd cmd bisect good %(commit)'
bind main bb +sh -c 'tig.cmd cmd bisect bad %(commit)'
bind main br +sh -c 'tig.cmd cmd bisect reset'
bind main =  :set main-options = -n 20000
bind main fm :set main-options = '--no-merges'
bind main rv +sh -c 'tig.cmd cmd.rcv revert --no-edit %(commit)'
bind diff rv +sh -c 'tig.cmd cmd.rcv revert --no-edit %(commit)'
bind main rb >?git rebase -i %(commit)
bind main ra >?git rebase --abort
bind main rc >?git rebase --continue
bind main D  >?git clean -fd
bind main su !sh -c 'tig.cmd choose push %(commit) %(refname)'
bind main sm +sh -c 'tig.cmd choose merge %(commit) %(refname)'
bind main sr +sh -c 'tig.cmd choose rebase %(commit) %(refname)'
bind main sc +sh -c 'tig.cmd choose clean'
# }

# Log {
bind log = :set log-options = -p
bind log fm :set log-options = '--no-merges'
# }

# Reflog {
bind reflog C none
bind reflog ! none
# }

# Pager {
bind pager <Space> view-close-no-quit
# }
