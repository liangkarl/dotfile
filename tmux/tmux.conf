# Global tmux setting

## Abbreviations:
# set   : set-option
# setw  : set-window-option
# bind  : bind-key
# unbind: unbind-key

## Unit:
# session > window > layout > pane

# erase all keybinds
# unbind -a

tmux_home="${XDG_CONFIG_HOME}/tmux"
tmux_plugin="${tmux_home}/plugins"
tmux_tool="${tmux_home}/tools"

set -g prefix `	# set ` as prefix key

# https://codeberg.org/scy/dotfiles/src/branch/main/.tmux.conf
# For nvim :checkhealth setting
# If the outer terminal is signalling true color support, define an override, because its terminfo file might not know
# about this. This is for example the case in MS Terminal, which defines itself as xterm-256color.
if '[ "$COLORTERM" = "24bit" -o "$COLORTERM" = "truecolor" ]' {
	set -g terminal-overrides ',xterm*:Tc'
}
# Nowadays, I have (at least) 256-color terminals everywhere, and also a real "tmux" terminfo. Compared to
# `screen-256color`, this has the added advantage of italic text working (instead of displayed with reversed colors).
set -g default-terminal tmux-256color
# However, there is one terminal where I don't really have 256 colors: The Linux Console.
if '[ "$TERM" = "linux" ]' {
	set -g default-terminal tmux
}

setw -g  automatic-rename       # rename window automately
setw -g  mode-keys        vi    # set copy-mode to vi style
set  -g  base-index       1     # set to the leftest number on the keyboard
set  -g  pane-base-index  1     # set to the leftest number on the keyboard
set  -g  history-limit    64000 # scroll history size
set  -sg escape-time      0     # no waiting time
set  -g  focus-events     on    # Used for vim-tmux-clipboard
setw -g  monitor-bell     on    # monitor bell in the window
setw -g  visual-bell      on    # show visual alert when task complete
setw -g  bell-action      other # only other, not current window, triggers bell
set  -g  renumber-windows on    # renumber window index if any window is closed
set  -g aggressive-resize on    # determine the size of windows depending on where they are _displayed_, not where they are attached to.

# Border
set -g pane-border-status top
set -g pane-border-format " #{?pane_active,#[reverse],}[#P:#{pane_pid}]#[default] TTY:#{pane_tty} CMD:#{pane_current_command} "
# Used for switching window and creating multiple panes
set-hook -g -w pane-focus-in "
	if -F '#{e|>:#{window_panes},1}' {
		if -F '#{==:#{window_zoomed_flag},1}' {
			set -w pane-border-status off
		}{
			set -w pane-border-status top
		}
	} {
		set -w pane-border-status off
	}"
# Used for zooming pane under the same window
set-hook -g -w after-resize-pane "
	if -F '#{e|>:#{window_panes},1}' {
		if -F '#{==:#{window_zoomed_flag},1}' {
			set -w pane-border-status off
		}{
			set -w pane-border-status top
		}
	}{
		set -w pane-border-status off
	}"

# Add alias for split-window
# set -s command-alias[10] vs='split-window -h'
# set -s command-alias[11] hs='split-window -v'

## Key mapping

# Reserved usable keys:
# unbind d
# unbind n
bind o if -F '#{e|>:#{window_panes},1}' {
	# TODO:
	# Add `primary` and `secondary` tags to ensure the sequence would
	# not be broken
	if -F '#{==:#{window_zoomed_flag},1}' {
		resize-pane -Z
		select-pane -l
	} {
		select-pane -l
		resize-pane -Z
	}
} 'split-window -v -f -c "#{pane_current_path}" -l "25%"'
bind i if -F '#{e|>:#{window_panes},1}' {
	# TODO:
	# Same as above
	if -F '#{==:#{window_zoomed_flag},1}' {
		resize-pane -Z
		select-pane -l
	} {
		select-pane -l
		resize-pane -Z
	}
} 'split-window -h -f -c "#{pane_current_path}" -l "33%"'

# Layout:
# - unidirectional switch to next layout
unbind M-1
unbind M-2
unbind M-3
unbind M-4
unbind M-5
unbind Space
bind l next-layout

# Session:
# [x] pop up menu for session operation
bind s choose-tree -sZ -O name			# improve keybind s

# Window:
# - unidirectional switch to next pane
# [x] pop up menu for window operation
# [x] move window
# [x] show window options
unbind p
unbind .
unbind &
bind k confirm-before -p "Do you really want to kill this window? (y/n)" kill-window
bind r move-window -r ';' select-layout -E	# sort the windows
bind w choose-tree -w -f '#{m:#{session_attached},1}'
bind -r a last-window
bind -r Tab select-window -n
bind -r BTab select-window -p

bind c new-window -a -c "#{pane_current_path}"	# enhance keybind c

# Pane:
# - select-layout -E could only balance the simple layout
# - unidirectional switch to next pane
# [x] pop up menu for pane operation
unbind Up		# Change to the pane above of the current pane.
unbind Down		# Change to the pane below of the current pane.
unbind Left		# Change to the pane left of the current pane.
unbind Right	# Change to the pane right of the current pane.
unbind '"'
unbind %
bind | split-window -h -c "#{pane_current_path}" ';' select-layout -E
bind - split-window -v -c "#{pane_current_path}" ';' select-layout -E
bind x confirm-before -p "Do you really want to kill this pane? (y/n)" kill-pane ';' select-layout -E	# enhance keybind x
bind -r \\ display-panes -b -d 200 ';' select-pane -Z -t :.+ ';' display-panes -d 200   # enhance keybind n

# Copy-mode:
unbind [
bind `   copy-mode
bind ?   copy-mode ';' send ?
bind /   copy-mode ';' send /
bind v   copy-mode ';' send v
bind V   copy-mode ';' send V
bind C-v copy-mode ';' send C-v
bind -T  copy-mode-vi v     send -X begin-selection
bind -T  copy-mode-vi C-c   send -X clear-selection
bind -T  copy-mode-vi q     send -X cancel
bind -T  copy-mode-vi p     send -X cancel          ';' send-prefix
bind -T  copy-mode-vi Enter send -X clear-selection ';' send -X select-word
bind -T  copy-mode-vi C-v   send -X rectangle-on    ';' send -X begin-selection

unbind ]
bind p paste-buffer

# Misc:
# bind [ popup -E -T " Main Menu " \
# 		"tmux new -n plugin ${tmux_tool}/main-menu.bash ';' \
# 		set status off"
# bind o   run "${tmux_tool}/debug-console.bash"
bind h   list-keys -T prefix ';' list-keys -T copy-mode-vi
bind ,   new-window -n '[tmux-conf]' nvim ${tmux_home}/tmux.conf
bind ';' new-window -n '[git]' -c '#{pane_current_path}' ${tmux_tool}/tig.bash
bind C   confirm-before -p "Do you want to clear history? (y/n)" clear-history

## Plugins
bind ] run "${tmux_tool}/plugin-menu.bash"

if '[[ $OSTYPE == "linux-gnu" ]]' {
	if '[[ -n "$WSL_DISTRO_NAME" ]]' {
		source ${tmux_home}/plat/wsl.conf
	}{
		source ${tmux_home}/plat/linux.conf
	}
}{ if '[[ $OSTYPE == "darwin" ]]' {
	source ${tmux_home}/plat/mac.conf
}}

# TPM(tmux plugin manager) itself
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'     # Make tmux more sensible
set -g @plugin 'tmux-plugins/tmux-cowboy'		# Kill no-response process in current pane with 'prefix + *'

set -g @plugin 'ofirgall/tmux-window-name'      # Name your tmux windows smartly, like IDE's.
set -g @tmux_window_name_max_name_len 15
set -g @tmux_window_name_show_program_args "False"

 # Copied text could be used outside tmux
set -g @plugin      'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe'

TMUX_FZF_LAUNCH_KEY='['
TMUX_FZF_OPTIONS="-p -w 62% -h 38% -m"
set -g @plugin 'sainnhe/tmux-fzf'

set -g @plugin                          'laktak/extrakto'
set -g @extrakto_key                    "\'"
set -g @extrakto_grab_area              "window full"
set -g @extrakto_popup_size             '60%'
set -g @extrakto_split_direction        'p'
set -g @extrakto_fzf_unset_default_opts "false"

set -g @plugin                'roosta/tmux-fuzzback'
set -g @fuzzback-bind         'j'
set -g @fuzzback-popup        0
set -g @fuzzback-hide-preview 1
set -g @fuzzback-fzf-colors   'hl:1:underline,hl+:1:underline'

set -g @plugin                               'IngoMeyer441/tmux-easy-motion'
set -g @easy-motion-prefix                   "f"
set -g @easy-motion-target-keys              "fjdkslghrua;eiwoqptyvncm"
set -g @easy-motion-default-motion           "bd-f"
set -g @easy-motion-dim-style                "fg=colour242"
set -g @easy-motion-highlight-style          "fg=colour196,bold"
set -g @easy-motion-highlight-2-first-style  "fg=brightyellow,bold"
set -g @easy-motion-highlight-2-second-style "fg=yellow,bold"

## Themes
# Dracula: https://draculatheme.com/tmux
# Dracula Core:
set -g @plugin                     'dracula/tmux'
set -g @dracula-show-left-icon     session
set -g @dracula-show-empty-plugins true
set -g @dracula-refresh-rate       1
set -g @dracula-show-flags         true # '*':current pane, '-': previous window, '!': bell

# Dracula Plugins:
#   battery, cpu-usage, git, gpu-usage, ram-usage, tmux-ram-usage,
#   network, network-bandwidth, network-ping, ssh-session,
#   attached-clients, network-vpn, weather, time, mpc, spotify-tui,
#   kubernetes-context, synchronize-panes
set -g @dracula-plugins              "tmux-ram-usage ram-usage cpu-usage"
set -g @dracula-tmux-ram-usage-label "TMUX"

# Dracula Colorschemes:
# Available Colors:
#   white, gray, dark_gray, light_purple, dark_purple, cyan, green, orange, red, pink, yellow
# Command Format:
#   set -g @dracula-[plugin-name]-colors "[background] [foreground]"
set -g @dracula-tmux-ram-usage-colors "dark_purple white"

# tmux-gruvbox: https://github.com/egel/tmux-gruvbox
# set -g @plugin 'egel/tmux-gruvbox'
# set -g @tmux-gruvbox 'dark' # or 'light'

# FIXME: WA(?) for WSL2
# https://github.com/microsoft/WSL/issues/5931
set -g escape-time 50

# Wrapped TPM script
run -b ${tmux_home}/bootstrap
