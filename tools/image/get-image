#!/bin/bash
#
# Config file sample:
#   # required
#   remote='hogwarts'		# can be 'user@host'
#   remote_root=(
#   "path/one"
#   "path/two"
#   )
#
#   # optional
#   default_local_dir="images@$(date +%Y%m%d-%H%M%S)"
#   default_remote_files=(
#   "aaa.img"
#   "bbb.bin"
#   "ccc.xz"
#   )
#   copy='rsync'

usage() {
	local name="$(basename $0)"
	cat <<-USAGE
	NAME:
	$name - Get images from remote server

	SYNOPSIS:
	$name [-s SrcFile] [-d DestDir] [-t] [-b CopyTool]

	OPTIONS:
	    -s: copy from remote source file.
	    -d: copy to dest directory. copy to '.' if no config
	        and variable assigned
	    -t: copy to 'temp/' under current dir
	    -b: change copy tool
USAGE
}

set -eE
copy='rsync'
conf='image.conf'

# read default conf
conf="$(search_file_upward $conf $(pwd) || true)"
if [[ -z "$conf" ]]; then
	echo "failed to find config" >&2
else
	echo "load: ${conf}"
	source $conf
fi

# no check for required variables, so don't mess them

# check optional variables
local_dir=${default_local_dir:-.}
if (( ${#default_remote_files[@]} == 0 )); then
	remote_files="*"
else
	remote_files="{${default_remote_files[@]}}"
	remote_files="${remote_files// /,}"
fi

# parse options
while (( $# != 0 )); do
	case $1 in
		-d)
			shift
			local_dir=$1
			;;
		-s)
			shift
			remote_files=$1
			;;
		-t)
			local_dir='temp'
			;;
		-b)
			shift
			copy="$1"
			;;
		*)
			usage
			exit 2
	esac
	shift
done

# print select menu & get answer
root=''
list_len=${#remote_root[@]}
if (( $list_len != 1 )); then
	PS3="Select an option from 1 to ${list_len}: "
	select item in "${remote_root[@]}"; do
		# $REPLY is what user entered
		# $item is limited in list values
		if [[ -z $item ]]; then
			echo "exit with '$REPLY'"
			exit 3
		fi
		root=$item
		echo "remote dir: $root"
		break
	done
else
	root="${remote_root[0]}"
fi

if [[ $copy == 'rsync' ]]; then
	# assign customized parameters
	argv='-'
	argv+='a'	# shortcut of -r, -l, -p, -t, -g, -o, -D
				# recurise, link, preserve most file attributes
	argv+='h'	# output human readable numbers
	argv+='z'	# compress file data
	argv+='v'	# verbose
	argv+='u'	# only update modified data and skip no changed files
	argv+=' --progress'
				# show progress while transferring data
	argv+=' --delete'
				# remove dst files not existed in src dir
	# incompatible with '--partial-dir' & '-S'
	argv+=' --inplace'
				# update dst files in-place instead of temp dir
	#argv+=' --partial-dir=.rsync-partial'
				# partial files can keep last download progess before interrupt
	#argv+='S'	# handle sparse files efficiently
	rsync --list-only -u ${remote}:${root}/${remote_files} ${local_dir}/
elif [[ $copy == 'scp' ]] || [[ $copy == 'sftp' ]]; then
	argv='-r'
fi

eval $copy ${argv} ${remote}:${root}/${remote_files} ${local_dir}/
