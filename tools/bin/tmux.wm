#!/usr/bin/env bash

# $0 config-name-with-abs-path
# This tool would create new windows in current tmux session

source $(mylib file)

set -eE

usage() {
	n="$(basename $0)"
	cat <<-EOF
	NAME:
	$n - create window tabs according to wins.conf
	$n [OPTIONS] DIR - start $n under assigned DIR

	OPTIONS:
	-h: print help
	-t: assign target session
	-o: output sample $WIN_CONF
	-p: load $WIN_CONF not only in current folder but also in parent folders
	EOF
	exit $1
}

# $0 title path cmd
new_win() {
	local cmd

	cmd="new-window"

	# Assume $name is the first window name of $name session
	# create new window next to $name window, (+)
	[[ ! -z "$name" ]] && cmd+=" -t $name:+"

	# first window name
	[[ ! -z "$1" ]] && cmd+=" -n $1"

	# set current patch
	[[ ! -z "$2" ]] && cmd+=" -c $2"

	# $@ would be '' if $# < 2
	shift 2
	cmd+=" \;"

	# add initial commands
	[[ ! -z "$@" ]] && cmd+=" send-keys '$@' C-m \;"

	eval tmux $cmd
}

WIN_CONF='win.conf'

(( $# == 0 )) && usage 3

while (( $# > 0 )); do
	case "$1" in
		-h)
			usage 0
			;;
		-p)
			SEARCH_PARENT_DIR=y
			;;
		-t)
			shift
			name="$1"
			;;
		-o)
			shift
			cat > $WIN_CONF <<-EOF
			# Format like this:
			# win=([name]='WIN NAME' [cwd]='WORKING DIR PATH' [cmd]='INIT CMD')
			EOF
			;;
		*)
			if [[ -e "$1" ]]; then
				SDIR="$(readlink -e $1)"
			else
				exit 2
			fi
			;;
	esac
	shift
done

if [[ "$SEARCH_PARENT_DIR" == y ]]; then
	CONF="$(find_file_path $SDIR/$WIN_CONF)"
else
	CONF=$SDIR/$WIN_CONF
fi

if [[ -z "$CONF" || ! -e "$CONF" ]]; then
	new_win "$name" "$(pwd)"
	exit
fi 2> /dev/null

declare -A win
while IFS= read -r line; do
	eval $line
	[[ -z "${win[name]}" ]] && break

	[[ "${win[cwd]}" == ~/* ]] && win[cwd]=${win[cwd]/\~/$HOME}
	[[ "${win[cwd]}" != /* ]] && win[cwd]=$SDIR/${win[cwd]}

	new_win "${win[name]}" "${win[cwd]}" "${win[cmd]}"
done < "$CONF" 2> /dev/null
