#!/usr/bin/env bash

# this is for setting up a workspace in tmux

# TARGET_DIR=$(fasd -d $@)
TARGET_NAME="$1"

#
# ts.conf:
#
# # space+=([name]='position')
# space+=([j90]='~/path/to/j90/project.conf/location')
#

#
# project.conf:
#
# # project name
# project='aaa'
#
# # windows setup:
# # win_1=('name' 'directory' 'command')
# win_1=('make' 'code.0' '')
# win_2=('kernel' 'path/to/kernel' '')
# win_3=('device' 'path/to/device' '')
# win_4=('lk' 'path/to/lk' '')
#

source $(mylib file)
source $(mylib io)
source $(mylib sys)
source $(mylib menu)

usage() {
	local n

	n=$(basename $0)
	cat <<-EOF
	DESCRIPTION:
	$n is used for attaching specific tmux session, configed by ts.conf

	SYNOPSIS:
	$n [OPTIONS]

	OPTIONS:
	  '': enter session
	  -d: delete sessions
	  -e: edit session configuration
	  -h: help
	EOF

	exit $1
}

switch_session() {
	local cmd

	if [[ "$TMUX" == '' ]]; then # outside
		cmd='tmux attach'
	else # inside
		TMUX=''
		cmd="tmux switch-client"
	fi

	eval $cmd $@
	exit 0
}

edit_conf() {
	local dir confg

	if [[ ! -e $CONF ]]; then
		dir=$(dirname $CONF)
		[[ ! -e $dir ]] && mkdir -p $dir

		cat > $CONF <<-EOF
		# $(basename $CONF) example:
		#
		# space=([name]='j90' [cwd]='~/path/to/j90/project.conf/place')
		# space=([name]='ui7' [cwd]='~/path/to/j90/project.conf/place')
		EOF
	else
		vim $CONF
	fi
}

parse_conf() {
	local line name path

	[[ ! -e "$CONF" ]] && edit_conf

	# read config
	# while parse line
	while IFS= read -r line; do
		eval $line

		name="${space[name]}"
		[[ -z "${name}" ]] && continue

		path="${space[cwd]}"
		[[ ! -d "${path}" ]] && path="$HOME"

		stat[$name]='off'
		tmux has -t="${name}" && stat[$name]='on'

		cwd[$name]="$path"

	done < "$CONF" 2>/dev/null
}

enter() {
	local ans name path

	# show menu ${!list[@]}
	menu_title "available project names:"
	menu_prompt "select one to start:"
	menu ${!stat[@]} "cancel"
	name=$(menu_final)
	path="${cwd[$name]}"

	[[ "$name" == "cancel" ]] && exit

	# if project not exist
	if [[ "${stat[$name]}" == 'off' ]]; then
		# new a detached session
		eval tmux new -d -s $name -n "[$name]" -c $path

		# if wins is available
		if [[ -e "$wins" ]]; then
			# add wins following by wins.conf
			eval $wins -c $path/wins.conf -t $name -p $path

			# FIXME: failed to remove [$name] window here
			tmux kill-window -t "[$name]" \; \
				move-window -r \;
		fi
	fi

	switch_session -t $name
}

# delete session
remove() {
	local n name
	# while session not exit
	for n in ${!stat[@]}; do
		# unset it
		[[ "${stat[$n]}" == off ]] && unset stat[$n]
	done

	(( ${#stat[@]} == 0 )) && exit_msg 0 "no session available"

	# show menu
	menu_title "available session names:"
	menu_prompt "select one to remove:"
	menu ${!stat[@]} "cancel"
	name=$(menu_final)

	[[ "$name" == "cancel" ]] && exit

	tmux kill-session -t $name
}

# set -xv
set -eE

declare -A stat cwd space
CONF="$XDG_CONFIG_HOME/tmux/space.conf"
wins="$XDG_CONFIG_HOME/tmux/tools/wins"
# CONF="$PWD/space.conf"

case $1 in
	'')
		ENTER=y
		;;
	-d)
		REMOVE=y
		;;
	-e)
		EDIT_CONF=y
		;;
	-h)
		usage 0
		;;
	*)
		usage 2
		;;
esac

[[ "$EDIT_CONF" == y ]] && edit_conf

parse_conf

[[ "$ENTER" == y ]] && enter
[[ "$REMOVE" == y ]] && remove
