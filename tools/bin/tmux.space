#!/usr/bin/env bash

# this is for setting up a workspace in tmux

# TARGET_DIR=$(fasd -d $@)
TARGET_NAME="$1"

#
# ts.conf:
#
# # space+=([name]='position')
# space+=([j90]='~/path/to/j90/project.conf/location')
#

#
# project.conf:
#
# # project name
# project='aaa'
#
# # windows setup:
# # win_1=('name' 'directory' 'command')
# win_1=('make' 'code.0' '')
# win_2=('kernel' 'path/to/kernel' '')
# win_3=('device' 'path/to/device' '')
# win_4=('lk' 'path/to/lk' '')
#

source $(mylib file)
source $(mylib io)
source $(mylib sys)
source $(mylib menu)

usage() {
	local n

	n=$(basename $0)
	cat <<-EOF
	DESCRIPTION:
	$n is used for attaching specific tmux session, configed by ts.conf

	SYNOPSIS:
	$n [OPTIONS]

	OPTIONS:
	  '': enter session
	  -d: delete sessions
	  -e: edit session configuration
	  -h: help
	EOF

	exit $1
}

load_conf() { jp -u -f $CONF "$@"; }

sort_str() { printf '%s\n' "$@" | sort | xargs; }

switch_session() {
	local cmd

	if [[ "$TMUX" == '' ]]; then # outside
		cmd='tmux attach'
	else # inside
		TMUX=''
		cmd="tmux switch-client"
	fi

	eval $cmd $@
}

edit_conf() {
	local dir confg

	if [[ ! -e $CONF ]]; then
		dir=$(dirname $CONF)
		[[ ! -e $dir ]] && mkdir -p $dir

		jo -p num=2 \
			list=$(jo -a \
				"$(jo name='one' dir=/a/b/c)" \
				"$(jo name='two' dir=/c/b/a)" \
			) > $CONF
	fi

	vim $CONF
}

parse_conf() {
	local name path i

	i=0
	while :; do
		name="$(load_conf list[$i].name)"
		[[ "$name" == null ]] && break

		path="$(load_conf list[$i].dir)"
		dir[$name]="$path"

		stat[$name]='on'
		tmux has -t "${name}" || stat[$name]='off'

		((i++))
	done 2> /dev/null
}

enter() {
	local name path

	# show menu ${!list[@]}
	menu_title "available project names:"
	menu_prompt "select one to start:"
	menu_select $(sort_str ${!stat[@]}) "cancel"
	name=$(menu_choice)
	path="${dir[$name]}"

	[[ "$name" == "cancel" ]] && exit

	# if project not exist
	if [[ "${stat[$name]}" == 'off' ]]; then
		# new a detached session
		eval tmux new -d -s $name -n "$name" -c $path

		# if wins is available
		if has_cmd $wins; then
			# add wins following by wins.conf
			eval $wins -t $name $path || true

			# kill #1 window in $name session
			# select lowest-number window
			# resort window
			tmux kill-window -t $name:1 \; \
				select-window -t $name:^ \; \
				move-window -r \; || true
		fi
	fi

	switch_session -t $name

	# It's asynchronous condition that user would attach or switch
	# to other session, but the original session would keep going
	# down here.
}

# delete session
remove() {
	local n name
	# while session not exit
	for n in ${!stat[@]}; do
		# unset it
		[[ "${stat[$n]}" == 'off' ]] && unset stat[$n]
	done

	(( ${#stat[@]} == 0 )) && exit_msg 0 "no session available"

	# show menu
	menu_title "available session names:"
	menu_prompt "select one to remove:"
	menu_select $(sort_str ${!stat[@]}) "cancel"
	name=$(menu_choice)

	[[ "$name" == "cancel" ]] && exit

	tmux kill-session -t $name
}

# set -xv
set -eE

declare -A stat dir space
CONF="$XDG_CONFIG_HOME/tmux/space.json"
wins="tmux.wm"

case $1 in
	'')
		ENTER=y
		;;
	-d)
		REMOVE=y
		;;
	-e)
		EDIT_CONF=y
		;;
	-h)
		usage 0
		;;
	*)
		usage 2
		;;
esac

[[ "$EDIT_CONF" == y ]] && edit_conf

parse_conf || echo "there is something wrong with '$CONF'"

if [[ "$ENTER" == y ]]; then
	enter
	exit
fi

if [[ "$REMOVE" == y ]]; then
	while :; do
		remove
	done
	exit
fi
