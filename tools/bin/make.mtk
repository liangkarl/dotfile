#!/usr/bin/env bash

# MIT License
# -----------
# Copyright (c) 2021 Karl Liang
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

source $(mylib io)
source $(mylib file)
source $(mylib menu)

# don't move to botton since 'extglob' needs to be called at first
shopt -s extglob

usage() {
	local name
	name="$(basename $0)"

	cat<<-EOF
	NAME:
	    $name - a helper script for MTK build system.

	SYNOPSIS:
	    $name [-k|k|kernel] [-v|v|vendor] [-s|s|system]
	    $name [-m|m|merge] [-mo|mo|merge-ota]
	    $name [-ak|ak|add-kernel config]
	    $name [-av|av|add-vendor config]
	    $name [-as|as|add-system config]
	    $name [-lc|lc|load-config]
	    $name [-dc|dc|del-config]
	    $name [-l|l|list]

	DESCRIPTION:
	    k, v, s - compile kernel, vendor or system
	    m, o - generate whole images or otapackage.zip
	    ak, av, as - setup lunch config of kernel, vendor or system
	    lc - load default build config
	    dc - del runtime build config
	    l - list current config and output dir location. Output
	        dir only appreared after compile source codes.

	EXAMPLE:
	    # compile kernel, vendor, system and merge images
	    $ $name k v s m
	    $ $name ak vnd_qbert-userdebug	 # add kernel config
	    $ $name l		  # show config and output info
	EOF

	exit $1
}

split_build() {
	local split_build merged_dir
	local cmd out config

	for item in 'kernel' 'vendor' 'system'; do
		out="${item}_out_dir"
		config="${item}_lunch"
		if [[ -z "${!out}" ]]; then
			echo "get product out directory of ${item}"
			lunch ${!config}
			eval ${out}=$ANDROID_PRODUCT_OUT
		fi
	done

	merged_dir="$(readlink -f final-images)"
	split_build=$system_out_dir/images/split_build.py

	rm -rf $merged_dir
	cmd=$(trap -p ERR | awk -F\' '{print $2}')
	trap "${cmd}; rm -rf ${merged_dir}" ERR

	python $split_build \
		--system-dir $system_out_dir/images \
		--vendor-dir $vendor_out_dir/images \
		--kernel-dir $kernel_out_dir/images \
		--output-dir $merged_dir $1
}

build_kernel() {
	lunch $kernel_lunch
	kernel_out_dir=$ANDROID_PRODUCT_OUT
	rm -rf ${kernel_out_dir}/obj/KERNEL_OBJ
	rm -rf ${kernel_out_dir}/images/krn*
	make -j24 krn_images
	# FIXME: move cmd db feature to somewhere else
	# if [[ -e "$(readlink -e "$kernel_dir")" ]]; then
	# 	cmd_list+=("setup_kernel_cmddb $kernel_dir")
	# fi
}

build_system() {
	lunch $system_lunch
	system_out_dir=$ANDROID_PRODUCT_OUT

	rm -rf ${system_out_dir}/obj
	rm -rf ${system_out_dir}/images
	make -j24 sys_images
	# FIXME: move cmd db feature to somewhere else
	# cmd_list+=("create_cmd_db system")
}

build_vendor() {
	lunch $vendor_lunch
	vendor_out_dir=$ANDROID_PRODUCT_OUT

	# avoid to remove kernel obj with same config name
	rm -rf ${vendor_out_dir}/images/vnd*
	rm -rf ${vendor_out_dir}/obj/!(KERNEL_OBJ)
	make -j24 vnd_images
	# FIXME: move cmd db feature to somewhere else
	# cmd_list+=("create_cmd_db vendor")
}

add_build_note_header() {
	cat > $NOTE_HEADER <<-EOF
	# build-info
	* start: $(date '+%D - %T')
	* location: $(pwd)
	* commad: ${EXE_CMD}

	# environment
	* kernel_lunch=${kernel_lunch}
	* vendor_lunch=${vendor_lunch}
	* system_lunch=${system_lunch}

	# note
	EOF
}

add_build_note_content_exp() {
	cat > $NOTE_CONTENT <<-EOF
	[//]: # (Add items with Markdown syntax)
	[//]: # (sorted list: 1., 2.)
	[//]: # (unsorted list: *)
	EOF
}

show_buildnote() {
	local title

	title="$1"
	if [[ -e "${NOTE}" ]]; then
		echo "=== ${title} ==="
		glow $NOTE
		echo "=========================="
	else
		echo "no ${NOTE} for showing"
	fi
}

save_rt_build_conf() {
	cat > $RT_BCONF <<-EOF
	kernel_lunch='${kernel_lunch}'
	vendor_lunch='${vendor_lunch}'
	system_lunch='${system_lunch}'
	kernel_out_dir='${kernel_out_dir}'
	vendor_out_dir='${vendor_out_dir}'
	system_out_dir='${system_out_dir}'
	EOF
}

parse_options() {
	# check input parameters
	(( $# == 0 )) && \
		exit_msg 0 "no more actions"

	# TODO: add cleanup RT_BCONF with 'ps'
	while (( $# != 0 )); do
		case "$1" in
			m|-m|merge)
				COMPILE=y
				NEED_MERGE=y
				TARGET_FILES=y
				;;
			o|-o|ota)
				COMPILE=y
				NEED_MERGE=y
				OTA=y
				;;
			k|-k|kernel)
				COMPILE=y
				MAKE_KERNEL=y
				;;
			s|-s|system)
				COMPILE=y
				MAKE_SYSTEM=y
				;;
			v|-v|vendor)
				COMPILE=y
				MAKE_VENDOR=y
				;;
			lc|-lc|load-config)
				CONFIG=y
				USE_DEF_BCONF=y
				;;
			dc|-dc|del-config)
				# not implement yet
				CONFIG=y
				DEL_RT_BCONF=y
				;;
			ak|-ak|add-kernel)
				CONFIG=y
				shift; kernel_lunch="$1"
				kernel_out_dir=''
				echo "kernel lunch: $kernel_lunch"
				;;
			av|-av|add-vendor)
				CONFIG=y
				shift; vendor_lunch="$1"
				vendor_out_dir=''
				echo "vendor lunch: $vendor_lunch"
				;;
			as|-as|add-system)
				CONFIG=y
				shift; system_lunch="$1"
				system_out_dir=''
				echo "system lunch: $system_lunch"
				;;
			l|-l|list)
				cat <<-EOF
				List lunch config:
				kernel: $kernel_lunch
				vendor: $vendor_lunch
				system: $system_lunch
				EOF
				exit 0
				;;
			h|-h|help)
				usage 0
				;;
			*)
				usage 248
		esac
		shift
	done
}

add_build_note_content() {
	local option

	menu_title "action list:"
	menu_prompt "select an option to buildnote: "
	menu_default 2
	menu 'add-note' 'skip' 'exit'
	option=$(menu_final)

	case ${option} in
		add-note)
			# create new note if no file existed
			[[ ! -e $NOTE_CONTENT ]] && add_build_note_content_exp

			# go to end of file
			vim "+$" $NOTE_CONTENT
			;;
		skip) # no needs for build note
			;;
		exit)
			exit
			;;
		*)
			exit_msg 2 "invalid option: '${option}'"
			;;
	esac
}

exit_cmd() {
	# calculate build elapse time
	BUILD_TIME=$(($(date +%s) - ${BUILD_TIME}))

	# show consumed time
	pr_info "total consumed time: $(date -d@${BUILD_TIME} -u +%H:%M:%S)"

	[[ ! -z "$ERR_OUT" ]] && eval pr_err "$ERR_MSG"

	# show build note
	show_buildnote "buildnote for this build"
}

config_env() {
	if [[ "${USE_DEF_BCONF}" == y ]]; then
		if [[ ! -e $DEF_BCONF ]]; then
			exit_msg 1 "$DEF_BCONF not found"
		fi
		. $DEF_BCONF
	fi
}

build_code() {
	local args=()

	# start counter
	BUILD_TIME=$(date +%s)

	# show required build info automatically
	trap "exit_cmd" EXIT
	trap 'ERR_OUT="$BASH_COMMAND"' ERR

	if [[ "${MAKE_KERNEL}" == y ]]; then
		build_kernel
	fi
	if [[ "${MAKE_VENDOR}" == y ]]; then
		build_vendor
	fi
	if [[ "${MAKE_SYSTEM}" == y ]]; then
		build_system
	fi
	if [[ "${NEED_MERGE}" == y ]]; then
		if [[ "${OTA}" == y ]]; then
			args+=('--otapackage')
		fi
		if [[ "${TARGET_FILES}" == y ]]; then
			args+=('--targetfiles')
		fi
		eval split_build ${args[@]}
	fi
}

# Global variables:
## Program variables
ENVSETUP='build/envsetup.sh'
EXE_CMD="$(basename $0) $@"
ERR_MSG='last command: $BASH_SOURCE:$LINENO $ERR_OUT'
BUILD_TIME=''
NOTE_HEADER='.note.header'
NOTE_CONTENT='.note.text'
NOTE="buildnote.md"
DEF_BCONF='build.conf'
RT_BCONF=".${PPID}.build.conf"

## Compiliant flags:
MAKE_KERNEL=''
MAKE_VENDOR=''
MAKE_SYSTEM=''
NEED_MERGE=''
OTA=''
COMPILE=''
CONFIG=''

## Config variables:
# kernel_lunch vendor_lunch system_lunch
# kernel_out_dir vendor_out_dir system_out_dir
# kernel_dir

# -a: export all functions
# -e: exit on error
# -E: make ERR trap inherit shell function
# -u: return while meet unset variables
# -o pipefail: return error once failed to execute the first pipline CMD
set -aeE

# load build script & configs
[[ -e $ENVSETUP ]] && . $ENVSETUP
[[ -e $DEF_BCONF ]] && . $DEF_BCONF
[[ -e $RT_BCONF ]] && . $RT_BCONF

# parse options
# change to flags, instead of command queue, to prevent ordering problems
# parse_options
parse_options $@

# check basic required command
[[ "$(type -t lunch)" != 'function' ]] && \
		exit_msg 249 "no 'lunch' for execution"

if [[ "$CONFIG" == y ]]; then
	config_env
fi

if [[ "$COMPILE" == y ]]; then
	# preview previous note
	show_buildnote "preview last $NOTE"

	# edit build note
	add_build_note_content

	# write necessary build information
	add_build_note_header

	# merge header & content
	cat $NOTE_HEADER $NOTE_CONTENT > $NOTE

	# start compiling
	build_code
fi

# save runtime lunch config
save_rt_build_conf
