#!/usr/bin/env bash

source $(mylib file)
source $(mylib io)
source $(mylib menu)

set -eE

export_conf() {
	cat > ${1}/${FCONF} <<-EOF
	# REQUIRED VARS
	remote=''
	remote_root=(
		"first"
		"second"
	)

	# OPTIONAL VARS
	# LDIR="images@\$(date +%Y%m%d-%H%M%S)"
	# RFILES=(
	#	"aaa.img"
	#	"bbb.bin"
	#	"ccc.xz"
	# )
	# BIN='rsync'
	EOF
}

usage() {
	local name="$(basename $0)"

	cat <<-EOF
	NAME:
	$name - download/upload files from/to remote server

	SYNOPSIS:
	$name [-f UP/DOWN file] [-d UP/DOWN dir]
	$name [-o ouput-dir] [-b CopyTool]

	OPTIONS:
	    -u: upload file (default: download)
	    -f: copy the file from/to the other side.
	    -d: copy the file(s) from/to the directory. (default: .)
	    -b: change copy tool
	    -o: export sample config
	EOF

	exit $1
}

# subtask "filename" command
subtask() {
	file="$1"
	shift
	cmd="$@"

	echo "$BASHPID: $file" >> $plist
	if ! eval $cmd; then
		sed -i "/$BASHPID/d" $plist
		return
	fi

	while ! sed -i "/$BASHPID/d" $plist; do
		# prevent SIGINT
		[[ -e $plist ]] || return

		sleep 1
	done
	echo -e "\r$BASHPID: transmit '$file' complete"
}

scan_list() {
	local thd timer

	thd=${1:-0}
	timer=0

	# keep scanning process list
	while (( $(wc -l < $plist) > $thd )); do
		# TODO: show download status here
		echo -e -n "\rwait subtask finished. ($((timer++)))"
		sleep 1
	done
}

select_and_show_menu() {
	# print select menu & get answer
	local list_len

	# only one transmit position
	list_len=${#remote_root[@]}
	if (( $list_len == 1 )); then
		root="${remote_root[0]}"
		return 0
	fi

	# manual selection
	menu_title 'more than one site as below:'
	menu_prompt 'select one to continue'
	menu_default 1
	menu ${remote_root[@]}
	root=$(menu_final)

	echo "remote dir: $root"
}

# disable the glob (noglob)
set -f

# set default values
RFILES='*'
LDIR='.'
BIN='rsync'
FCONF='transmit.conf'
THREAD_LIMIT=4
DIRECTION=down

declare -A CMD_OPTS
# -a, --archive: archive mode; equals -rlptgoD (no -H,-A,-X)
#                recurise, link, preserve most file attributes
# -h, --human-readable: output numbers in a human-readable format
# -z, --compress: compress file data during the transfer
# -v, --verbose: increase verbosity
# -q, --quiet: suppress non-error messages
# -u, --update: skip files that are newer on the receiver
# --progress: show progress during transfer
# --delete: delete extraneous files from dest dirs
# --inplace: update destination files in-place
# --stats: give some file-transfer stats
#
# incompatible with '--partial-dir' & '-S'
# -S, --sparse: handle sparse files efficiently
# --partial-dir=DIR: partial files can keep last download progess before interrupt
RSYNC_OPTS=('-a' '-h' '-z' '-u' '--delete' '--inplace' '-q' '--stats')
SFTP_OPTS=('-r' '-C')
SCP_OPTS=('-r' '-C')
CMD_OPTS=(
	[rsync]="${RSYNC_OPTS[@]}"
	[scp]="${SCP_OPTS[@]}"
	[sftp]="${SFTP_OPTS[@]}"
)

# parse options
while (( $# != 0 )); do
	case $1 in
		-u)
			DIRECTION=up
			;;
		-d)
			shift
			local_dir="$1"
			;;
		-f)
			shift
			src_files="$1"
			;;
		-b)
			shift
			bin="$1"
			;;
		-o)
			shift
			EXPORT_DIR="$1"
			;;
		*)
			usage 2
	esac
	shift
done

# check -o option
if [[ ! -z "$EXPORT_DIR" ]]; then
	if [[ -d "$EXPORT_DIR" ]]; then
		export_conf "$EXPORT_DIR"
		exit 0
	fi
	exit_msg 2 "invalid directory for exportion"
fi

# load .conf to override inner variables
FCONF="$(find_file_path $(pwd)/$FCONF || true)"
[[ -z "$FCONF" ]] && exit_msg 1 "failed to find config"

echo "load: ${FCONF}"
source $FCONF

# check runtime variables
[[ -z "$bin" ]] && bin=$BIN
[[ -z "$src_files" ]] && src_files=("${RFILES[@]}")
[[ -z "$local_dir" ]] && local_dir=$LDIR

# print select menu & get answer
select_and_show_menu

# setup_transmit_args
cmd=()
cmd+=("$bin")
cmd+=("${CMD_OPTS[${bin}]}")

export plist="$(mktemp)"

trap "rm -f $plist" 0

[[ $DIRECTION == down && ! -d $local_dir ]] && mkdir -p $local_dir

echo "start parallel transmitting, direction: $DIRECTION, max thread: $THREAD_LIMIT"
for file in ${src_files[@]}; do
	# block threads if limit is reached
	scan_list $THREAD_LIMIT

	# fork multiple threads to copy files
	if [[ $DIRECTION == 'down' ]]; then
		echo "download: $file"
		subtask "$file" \
				"${cmd[@]} ${remote}:${root}/${file} ${local_dir}/${file}" &
	else
		echo "upload: $file"
		subtask "$file" \
				"${cmd[@]} ${local_dir}/${file} ${remote}:${root}/${file}" &
	fi

done

# print all download thread(s)
scan_list

# ensure all child process has ended
wait

# join finished
echo "all transmition has finished"
