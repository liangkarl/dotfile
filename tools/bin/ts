#!/bin/bash

# this is for setting up a workspace in tmux

# TARGET_DIR=$(fasd -d $@)
TARGET_NAME="$1"

#
# ts.conf:
#
# # pos_x=('name' 'position')
# pos_1=('j90' '~/path/to/j90/project.conf/location')
#

#
# project.conf:
#
# # project name
# project='aaa'
#
# # windows setup:
# # win_1=('name' 'directory' 'command')
# win_1=('make' 'code.0' '')
# win_2=('kernel' 'path/to/kernel' '')
# win_3=('device' 'path/to/device' '')
# win_4=('lk' 'path/to/lk' '')
#

import-script file

usage() {
	local n

	n=$(basename $0)
	cat <<-EOF
	$n -p project-name
	$n -d delete-session
	$n -l
	$n -e
EOF

	exit $1
}

check_session() {
	local file i
	local name state pos path

	# import $project
	. $CONF

	# list session
	i=1
	state=none
	while :; do
		pos="pos_${i}[@]"
		pos=("${!pos}")

		name="${pos[0]}"
		[[ -z $name ]] && break

		path="${pos[1]}"

		if tmux has -t "$name" 2> /dev/null; then
			state='exist'
		fi
		eval "pos_${i}[2]='$state'"

		echo "$i) ${name} ${state} ${path}"
		((i++))
	done
}

switch_session() {
	local cmd

	if [[ "$TMUX" == '' ]]; then # outside
		cmd='tmux attach'
	else # inside
		TMUX=''
		cmd="tmux switch-client"
	fi

	eval $cmd $@
	exit 0
}

enter_session() {
	local proj

	# select project name
	read -p "select a project num to open: " proj
	# eval "proj=('pos_$proj[@]')"
	proj="pos_$proj[@]"
	proj=(${!proj})
	if [[ -z "${proj[0]}" ]]; then
		echo "invalid number of projects"
		exit 2
	fi
	PROJ_NAME="${proj[0]}"
	PROJ_PATH="${proj[1]}"
	PROJ_STATE="${proj[2]}"

	# if project not exist
	if [[ $PROJ_STATE == 'none' ]]; then
		# FIXME: these operation should be moved to 'ws'
		if [[ "$HAS_WS" == y ]]; then
			ws $PROJ_PATH
		else
			# expand bash macros
			eval tmux new -d -s $PROJ_NAME -c $PROJ_PATH
		fi
	fi

	switch_session -t $PROJ_NAME
}

delete_session() {
	# select project name
	read -p "select a project num to remove: " proj
	proj="pos_$proj[@]"
	proj=(${!proj})
	if [[ -z "${proj[0]}" ]]; then
		echo "invalid number of projects"
		exit 2
	fi
	PROJ_NAME="${proj[0]}"
	PROJ_PATH="${proj[1]}"
	PROJ_STATE="${proj[2]}"

	# if project exist
	if [[ $PROJ_STATE == 'exist' ]]; then
		# delelte session
		tmux kill-session -t $PROJ_NAME
	fi
}

edit_conf() {
	local dir confg

	dir=$(dirname $CONF)
	[[ ! -e $dir ]] && mkdir -p $dir

	if [[ ! -e $CONF ]]; then
		cat > $CONF <<-EOF
		# ts.conf:
		#
		# # pos_x=('name' 'position')
		# pos_1=('j90' '~/path/to/j90/project.conf/location')
EOF
	fi

	vim $CONF
}

CONF="$XDG_CONFIG_HOME/tmux/plugin/ts/ts.conf"
PROJECT_LIST=()
PROJ_NAME=''
PROJ_PATH=''
PROJ_STATE=''

(( $# == 0 )) && usage 1

case $1 in
	-p)
		LIST_PROJ=y
		PROJ=y
		;;
	-d)
		LIST_PROJ=y
		DEL_PROJ=y
		;;
	-l)
		LIST_PROJ=y
		;;
	-e)
		EDIT_PROJ_CONF=y
		;;
	*)
		usage 2
		;;
esac

[[ "$EDIT_PROJ_CONF" == y ]] && edit_conf

# list project name status
[[ "$LIST_PROJ" == y ]] && check_session

has-cmd && HAS_WS=y

[[ "$PROJ" == y ]] && enter_session

[[ "$DEL_PROJ" == y ]] && delete_session
