#!/usr/bin/env bash
#
# This tool based on plink.exe, a CLI version of putty
#

lib.add io
lib.add menu
lib.add sys
lib.add config

shopt -s extglob
tio="$(which tio || which tio.exe)"
ss="$(which ss || which ss.exe)"
plink="$(which plink || which plink.exe)"
putty="$(which putty || which putty.exe)"

usage() {
	local name="$(basename $0)"

	cat <<-EOF
	name:
	    $name - A simple CLI serial console that support tio, ss, plink and
	            putty.

	usage:
	    $name [-lob] [-p port]

	options:
	    -l: list available COM port
	    -o: setup serial config
	        eg, -o "br=115200;fc=N;db=8;sb=1;pa=n"
	    -b: select supported serial console .exe
	    -p: serial port path in Linux, such as '-p /dev/ttyUSB0',
	    -n: n is COM port number in WSL, such as '-1'.
	EOF

	exit $1
}

list_comport() {
	local ls d
	pr_info "Ports List:"
	if [[ -n "$WSL_DISTRO_NAME" ]]; then
		if [[ "$cmd" == 'ss' ]]; then
			eval $cmd -list
		else
			ls="Get-CimInstance -Class Win32_SerialPort | Select-Object Description, DeviceID"
			powershell.exe -Command $ls
		fi
	else
		ls="/dev/serial/by-path/"
		for d in $(ls $ls); do
			echo "$(realpath -e $ls/$d): $d"
		done
	fi
}

config.ss() {
	local pa
	declare -A pa_map

	pa_map=(
		[odd]="ODD"
		[even]="EVEN"
		[none]="NONE"
		[mark]='MARK'
		[space]='SPACE'
	)
	pa=${pa_map[$parity]}

	echo -n "-com:${port} -baud:${baudrate} -parity:${pa} "
	echo -n "-databits:${data_bits} -stopbits:${stop_bits} "
	echo -n "-log:$(wslpath -m $log)"
}

config.putty() {
	local pa fc
	declare -A pa_map fc_map

	pa_map=(
		[none]='n'
		[odd]='o'
		[even]='e'
		[mark]='m'
		[space]='s'
	)
	fc_map=(
		[none]='N'
		[XON_OFF]='X'
		[RST_CTS]='R'
		[DSR_STR]='D'
	)
	pa=${pa_map[$parity]}
	fc=${fc_map[$flow_control]}

	echo -n "-v -serial ${port} "
	echo -n "-sercfg ${baudrate},${data_bits},${pa},${stop_bits},${fc}"
}

config.plink() {
	config.putty
	echo -n "| tee $log"
}

config.tio() {
	echo -n "$port "
	echo -n "-b $baudrate -d $data_bits "
	echo -n "-s $stop_bits -p $parity "
	echo -n "-t -L --log-file $log --log-strip"
}

update_cb() {
	opt="$2"
}

# plink and putty are from https://www.putty.org/
# ss is from https://github.com/fasteddy516/SimplySerial
# tio is from https://github.com/tio/tio
cmds=(${tio} ${ss} ${plink} ${putty})

# default config:
baudrate=921600
flow_control=none
parity=none
data_bits=8
stop_bits=1
log=uart.$PPID.log
conf=~/.uart.conf

args=$(getopt lop0123456789 $*)
if [[ $? -ne 0 ]]; then
	usage 1
fi
set -- $args

# TODO: source project.conf to get project specific setup
[[ -e $conf ]] && source $conf

while :; do
	case $1 in
		-o)
			config_uart=y
			;;
		-l)
			list_port=y
			;;
		-+([0-9]))
			if [[ -n "$WSL_DISTRO_NAME" ]]; then
				port=COM$1
			else
				port=/dev/ttyUSB${1#-}
			fi
			;;
		-p)
			select_port=y
			;;
		--)
			shift; break
			;;
	esac
	shift
done

# FIXME: WA for getopt
[[ -n "$1" ]] && port=$1

if [[ -z "$cmd" ]]; then
	cmd=${cmds[0]}
	if [[ -z "$cmd" ]]; then
		exit_msg 4 "No supported commands for serial console."
	fi
fi

if [[ "$list_port" == y ]]; then
	list_comport
	exit
fi

config_load $conf

menu.backend 'fzf'
menu.callback update_cb

if [[ "$config_uart" == y ]]; then
	menu.title "Select a command as backend"
	menu.opts "${cmds[@]}"
	menu.add_exit
	menu.run
	cmd=$opt
	echo "backend: $(basename $cmd)"

	# baudrate
	menu.title 'baudrate setup'
	menu.defopt 2
	menu.opts 'b9600' 'b921600' 'b115200'
	menu.run
	baudrate=${opt#b}
	echo "baudrate: $opt"

	# flow control
	menu.title 'flow control setup'
	menu.defopt 0
	menu.opts 'none' 'XON_OFF' 'RST_CTS' 'DSR_STR'
	menu.run
	flow_control=${opt}
	echo "flow control: $opt"

	# parity
	menu.title 'parity setup'
	menu.defopt 0
	menu.opts 'none' 'odd' 'even' 'mark' 'space'
	menu.run
	parity=${opt}
	echo "parity: $opt"

	# data bit
	menu.title 'data bit setup'
	menu.defopt 3
	menu.opts '5' '6' '7' '8' '9'
	menu.run
	data_bits=${opt}
	echo "data bits: $opt"

	# stop bit
	menu.title 'stop bit setup'
	menu.defopt 0
	menu.opts '1' '1.5' '2'
	menu.run
	stop_bits=${opt}
	echo "stop bits: $opt"

	config_set cmd "$cmd"
	config_set baudrate "$baudrate"
	config_set flow_control "$flow_control"
	config_set parity "$parity"
	config_set data_bits "$data_bits"
	config_set stop_bits "$stop_bits"
	config_save
fi

[[ -z "$port" ]] && exit_msg 1 "No assigned UART port."

config_set port "$port"

touch $log
if [[ -n "$WSL_DISTRO_NAME" ]]; then
	# There must be an existed log file for ss.exe
	eval $cmd $(config.$(basename ${cmd#.exe}))
else
	eval sudo $cmd $(config.$(basename ${cmd#.exe}))
fi

config_save
