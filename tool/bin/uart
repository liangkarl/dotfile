#!/usr/bin/env bash
# Name:
# $0 - A simple CLI serial console that supports tio, ss, plink and
#      putty.
#
# Synopsis:
# $0 [-ls] [-[1-9]]
#
# Description:
#     -l: list available COM port
#     -s: setup serial port configurations
#         select supported serial console
#     -+([0-9]): serial port number, eg, -1, -2, etc.

lib.add menu
lib.add config
lib.add devel

shopt -s extglob
tio="$(which tio || which tio.exe)"
ss="$(which ss || which ss.exe)"
plink="$(which plink || which plink.exe)"
putty="$(which putty || which putty.exe)"

leave() {
	config.load $conf
	config.set port "$port"
	config.save
	msg.dbg "$conf:"
	msg.dbg "\n$(cat $conf)"
}

list_port() {
	local ls d
	msg.info "port List:"
	if [[ -n "$WSL_DISTRO_NAME" ]]; then
		if [[ "$cmd" == 'ss' ]]; then
			eval $cmd -list
		else
			ls="Get-CimInstance -Class Win32_SerialPort | Select-Object Description, DeviceID"
			powershell.exe -Command $ls
		fi
	else
		ls="/dev/serial/by-path/"
		for d in $(ls $ls); do
			echo "$(realpath -e $ls/$d): $d"
		done
	fi
}

menu_cb() {
	opt="$2"
}

setup_uart() {
	menu.backend 'fzf'
	menu.callback menu_cb

	menu.title "Select a command as backend"
	menu.opts "${cmds[@]}"
	menu.add_exit
	menu.run
	cmd=$opt
	msg.info "backend: $(basename $cmd)"

	# baudrate
	menu.title 'baudrate setup'
	menu.defopt 2
	menu.opts 'b9600' 'b921600' 'b115200'
	menu.run
	baudrate=${opt#b}
	msg.info "baudrate: $opt"

	# flow control
	menu.title 'flow control setup'
	menu.defopt 0
	menu.opts 'none' 'XON_OFF' 'RST_CTS' 'DSR_STR'
	menu.run
	flow_control=${opt}
	msg.info "flow control: $opt"

	# parity
	menu.title 'parity setup'
	menu.defopt 0
	menu.opts 'none' 'odd' 'even' 'mark' 'space'
	menu.run
	parity=${opt}
	msg.info "parity: $opt"

	# data bit
	menu.title 'data bit setup'
	menu.defopt 3
	menu.opts '5' '6' '7' '8' '9'
	menu.run
	data_bits=${opt}
	msg.info "data bits: $opt"

	# stop bit
	menu.title 'stop bit setup'
	menu.defopt 0
	menu.opts '1' '1.5' '2'
	menu.run
	stop_bits=${opt}
	msg.info "stop bits: $opt"

	config.set cmd "$cmd"
	config.set baudrate "$baudrate"
	config.set flow_control "$flow_control"
	config.set parity "$parity"
	config.set data_bits "$data_bits"
	config.set stop_bits "$stop_bits"
	config.save
}

config.ss() {
	local pa
	declare -A pa_map

	pa_map=(
		[odd]="ODD"
		[even]="EVEN"
		[none]="NONE"
		[mark]='MARK'
		[space]='SPACE'
	)
	pa=${pa_map[$parity]}

	echo -n "-com:${port} -baud:${baudrate} -parity:${pa} "
	echo -n "-databits:${data_bits} -stopbits:${stop_bits} "
	echo -n "-log:$(wslpath -m $log)"
}

config.putty() {
	local pa fc
	declare -A pa_map fc_map

	pa_map=(
		[none]='n'
		[odd]='o'
		[even]='e'
		[mark]='m'
		[space]='s'
	)
	fc_map=(
		[none]='N'
		[XON_OFF]='X'
		[RST_CTS]='R'
		[DSR_STR]='D'
	)
	pa=${pa_map[$parity]}
	fc=${fc_map[$flow_control]}

	echo -n "-v -serial ${port} "
	echo -n "-sercfg ${baudrate},${data_bits},${pa},${stop_bits},${fc}"
}

config.plink() {
	config.putty
	echo -n "| tee $log"
}

config.tio() {
	declare -A fc_map
	fc_map=(
		[none]='none'
		[XON_OFF]='soft'
		[RST_CTS]='hard'
		[DSR_STR]='hard'
	)
	echo -n "-b $baudrate -d $data_bits "
	echo -n "-s $stop_bits -p $parity "
	echo -n "-f ${fc_map[$flow_control]} "
	echo -n "-t -L --log-file $log --log-strip "
	echo -n "$port"
}

# plink, putty: https://www.putty.org/
# ss: https://github.com/fasteddy516/SimplySerial
# tio: https://github.com/tio/tio
cmds=(${tio} ${ss} ${plink} ${putty})

# set -v

# default config:
baudrate=921600
flow_control=none
parity=none
data_bits=8
stop_bits=1
log=uart.$PPID.log
conf=~/.uart.conf

source $conf

# internal args
cmd=${cmds[0]}

args=$(getopt ":sld0123456789" $*)
if [[ $? -ne 0 ]]; then
	cmd.help 1
fi
set -- $args

while [[ $# -gt 0 ]]; do
	case $1 in
		-s) setup_uart=y;;
		-l) list_port=y;;
		# TODO: implement these two options
		-d) debug=y;;
		-+([0-9])) pnum=${1#-};;
	esac
	shift
done

D="$(dbg.mark)"
[[ -n "$debug" ]] && dbg.on $D

if [[ "$list_port" == y ]]; then
	list_port
	exit
fi

config.reset
config.load $conf
config.get port port

if [[ "$setup_uart" == y ]]; then
	setup_uart
fi

if [[ -n "$pnum" ]]; then
	if [[ -n "$WSL_DISTRO_NAME" ]]; then
		port=COM${pnum}
	else
		port=/dev/ttyUSB${pnum}
	fi
fi

if [[ -z "$port" ]]; then
	msg.exit 1 "invalid port: '$port'"
fi

cmd="$cmd $(config.$(basename ${cmd#.exe}))"
if [[ -z "$WSL_DISTRO_NAME" ]]; then
	cmd="sudo $cmd"
fi

msg.info "port: $port"
touch $log
dbg.cmd "$cmd"
leave
