#!/usr/bin/env bash
#
# This tool based on plink.exe, a CLI version of putty
#

lib.add io
lib.add menu
lib.add sys

shopt -s extglob

usage() {
	local name="$(basename $0)"

	cat <<-EOF
	name:
	    $name - A simple CLI serial console that support tio, ss, plink and
	            putty.

	usage:
	    $name [-lob] [-p port]

	options:
	    -l: list available COM port
	    -o: setup serial config
	        eg, -o "br=115200;fc=N;db=8;sb=1;pa=n"
	    -b: select supported serial console .exe
	    -p: serial port path in Linux, such as '-p /dev/ttyUSB0',
	    -n: n is COM port number in WSL, such as '-1'.
	EOF

	exit $1
}

list_comport() {
	local ls
	pr_info "list serial ports:"
	if [[ -n "$WSL_DISTRO_NAME" ]]; then
		if [[ "$cmd" == 'ss' ]]; then
			eval $cmd -list
		else
			ls="Get-CimInstance -Class Win32_SerialPort | Select-Object Description, DeviceID"
			powershell.exe -Command $ls
		fi
	else
		ls -l /dev/serial/by-id/ --color
	fi
}

ss_conf() {
	local pa
	declare -A pa_map

	pa_map=(
		[odd]="ODD"
		[even]="EVEN"
		[none]="NONE"
		[mark]='MARK'
		[space]='SPACE'
	)
	pa=${pa_map[$parity]}

	echo -n "-com:${port} -baud:${baudrate} -parity:${pa} "
	echo -n "-databits:${data_bits} -stopbits:${stop_bits} "
	echo -n "-log:$(wslpath -m $log)"
}

putty_conf() {
	local pa fc
	declare -A pa_map fc_map

	pa_map=(
		[none]='n'
		[odd]='o'
		[even]='e'
		[mark]='m'
		[space]='s'
	)
	fc_map=(
		[none]='N'
		[XON_OFF]='X'
		[RST_CTS]='R'
		[DSR_STR]='D'
	)
	pa=${pa_map[$parity]}
	fc=${fc_map[$flow_control]}

	echo -n "-v -serial ${port} "
	echo -n "-sercfg ${baudrate},${data_bits},${pa},${stop_bits},${fc}"
}

plink_conf() {
	putty_conf
	echo -n "| tee $log"
}

tio_conf() {
	echo -n "$port "
	echo -n "-b $baudrate -d $data_bits "
	echo -n "-s $stop_bits -p $parity "
	echo -n "-t -l --log-file $log"
}

# plink and putty are from https://www.putty.org/
# ss is from https://github.com/fasteddy516/SimplySerial
# tio is from https://github.com/tio/tio
cmds=("tio" "ss" "plink" "putty")

# default config:
baudrate=921600
flow_control=none
parity=none
data_bits=8
stop_bits=1
log=uart.$PPID.log
conf=~/.uart.conf

(( $# == 0 )) && usage 2

# TODO: source project.conf to get project specific setup
[[ -e $conf ]] && source $conf

while (( $# != 0 )); do
	case $1 in
		-o)
			config_uart=y
			;;
		-l)
			list_port=y
			;;
		-b)
			select_cmd=y
			;;
		-+([0-9]))
			if [[ -z "$WSL_DISTRO_NAME" ]]; then
				exit_msg 3 "Not in WSL. Invalid serial port"
			fi

			port=COM$1
			select_port=y
			;;
		-p)
			shift
			if [[ ! -e "$1" ]]; then
				exit_msg 3 "Invalid serial port"
			fi

			port=$1
			select_port=y
			;;
		*)
			usage 2
			;;
	esac
	shift
done

for cmd in ${cmds[@]}; do
	printf -- "check $cmd...\r"
	if [[ -n "$WSL_DISTRO_NAME" ]]; then
		if has_cmd ${cmd}.exe; then
			printf -- "find $cmd\t\t\r"
			cmd=${cmd}.exe
			break
		fi
	elif has_cmd $cmd; then
		printf -- "find $cmd\t\t\r"
		break
	fi
done

if [[ "$list_port" == y ]]; then
	list_comport
	exit
fi

[[ "$select_port" != y ]] && exit_msg 1 "No assigned UART port."

if [[ "$select_cmd" == y ]]; then
	while :; do
		menu_title "list supported serial console tools"
		menu_prompt "select one to execute"
		menu_select ${cmds[@]} 'exit'
		cmd=$(menu_choice)

		if [[ "$cmd" == 'exit' ]]; then
			exit
		fi

		if has_cmd $cmd; then
			break
		elif has_cmd ${cmd}.exe; then
			cmd=${cmd}.exe
			break
		fi
	done
fi

if [[ "$config_uart" == y ]]; then
	# baudrate
	menu_title 'baudrate setup'
	menu_prompt 'select:'
	menu_default 3
	menu_select 'b9600' 'b921600' 'b115200'
	opt=$(menu_choice)
	baudrate=${opt#b}

	# flow control
	menu_title 'flow control setup'
	menu_prompt 'select:'
	menu_default 1
	menu_select 'none' 'XON_OFF' 'RST_CTS' 'DSR_STR'
	opt=$(menu_choice)
	flow_control=${opt}

	# parity
	menu_title 'parity setup'
	menu_prompt 'select:'
	menu_default 1
	menu_select 'none' 'odd' 'even' 'mark' 'space'
	opt=$(menu_choice)
	parity=${opt}

	# data bit
	menu_title 'data bit setup'
	menu_prompt 'select:'
	menu_default 4
	menu_select '5' '6' '7' '8' '9'
	opt=$(menu_choice)
	data_bits=${opt}

	# stop bit
	menu_title 'stop bit setup'
	menu_prompt 'select:'
	menu_default 1
	menu_select '1' '1.5' '2'
	opt=$(menu_choice)
	stop_bits=${opt}

	cat > $conf <<-EOF
	baudrate=${baudrate}
	flow_control=$flow_control
	parity=$parity
	data_bits=$data_bits
	stop_bits=$stop_bits
	EOF
fi

touch $log
if [[ -n "$WSL_DISTRO_NAME" ]]; then
	# There must be an existed log file for ss.exe
	eval $cmd $(${cmd}_conf)
else
	eval sudo $cmd $(${cmd}_conf)
fi
