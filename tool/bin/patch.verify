#!/usr/bin/env bash

lib.add io

set -eE

usage() {
	local name=$(basename $0)
	cat << EOF
name:
    ${name} - download specified patches and patch them to target projects.

usage:
	only execute one parameter in one time
	${name}
	${name}	[-acdhr]

options:
	-h: help
	-v: download and verify commits
	-d: download commits (metadata format)
	-a: apply downloaded commits
	-r: reset to last git revision before executing script.
	-c: clean configs: .commits, patch.*
	-t TAG-NAME: add tag when apply patches
EOF
	exit $1
}

# save_oldest_git_revision ${path}
save_oldest_git_revision() {
    # record file should be empty file at first
	local path oldc

	path="$1"

	[[ -z "$path" ]] && path="$(pwd)"

	oldc="$(git -C ${path} rev-parse HEAD)"

	# check file exist?
	## create file if no file existed
	[[ ! -e ${rfile} ]] && touch ${rfile}

	# grep path if file existed
	## record commit if no path existed
	cat ${rfile} | grep -sn ${path} || {
		printf "%s,%s\n" ${path} ${oldc} >> ${rfile}
	}
}

# restore_oldest_git_revision ${rfile}
restore_oldest_git_revision() {
	local rfile

	rfile="$1"
	rcontent=($(<${rfile}))
	i=0

	while (( $i < ${#rcontent[@]} )); do
		commit=${rcontent[${i}]##*,}
		path=${rcontent[${i}]%,${commit}}
		echo "path: ${path}"
		git -C ${path} reset --hard ${commit}
		i=$((i+1))
	done
}

add_patch_tag() {
	local rfile

	rfile="$1"
	rcontent=($(<${rfile}))
	i=0

	if [[ -z "$PATCH_TAG" ]]; then
		PATCH_TAG="patch.$(date +%y%m%d-%H%M)"
	fi

	while (( $i < ${#rcontent[@]} )); do
		path=${rcontent[${i}]%,${commit}}
		echo "path: ${path}"
		git -C ${path} tag $PATCH_TAG
		i=$((i+1))
	done
}

download_metadata() {
	idx=0
	tmp="patch.tmp"

	mkdir $tmpd
	cd $tmpd

	# fetch patches info into individual file
	while true; do
		ssh -p ${port} ${user}@${gerrit} \
			gerrit query --current-patch-set --start $idx limit:1 \
			${filter} > ${tmp}

		# The downloaded patches are sorted by uploaded date, so we sort them
		# based on patch number, which assume the order of applied patches
		# should be the same as the current patch set number
		num="$(grep "^  number" ${tmp} | awk '{print $2}')"
		patch="patch.${num}"
		mv ${tmp} ${patch}

		idx=$((idx + 1))
		echo "metadata: ${patch}"
		cat ${patch} | awk '/^  subject/'

		grep -q "moreChanges: true" $patch || {
			echo "no more changes"
			cd $OLDPWD
			break
		}

		# Prevent that the remote server blocked the request
		# due to frequenct query.
		sleep 1
	done
}

apply_patch() {
	list=($(ls ${tmpd}/patch.*))
	# parse each metadata of patches and cherry-pick them
	for patch in ${list[@]}; do
		url="$(cat $patch | grep "^  url:" | awk '{print $2}')"
		project="$(cat $patch | grep "^  project:" | awk '{print $2}')"
		ref="$(cat $patch | grep "^    ref:" | awk '{print $2}')"

		# This resule maybe more than one, so keep '$' at the end to avoid
		# getting aa/bb/cc when grep aa/bb
		str=$project
		while :; do
			path=$(repo list | awk -F: '/'${str//'/'/'\/'}'$/{print $1}')
			if [[ -n $path ]]; then
				break
			fi
			str=${str#*/}
		done

		cd $path
		git fetch ssh://${user}@${gerrit}:${port}/${project} ${ref} || {
			pr_warn "cannot download commit from '${url}'"
			cd $OLDPWD
			continue
		}

		save_oldest_git_revision
		# check git revision
		# record commit revision if no record existed
		# ignore revision if record existed

		git cherry-pick FETCH_HEAD || {
			git cherry-pick --abort
			echo "git revision recovered"
			pr_warn "skip commits from '${url}'"
		}
		git log -1 --format=reference
		cd $OLDPWD
	done
}

tmpd=".patch.tmp"
rfile="$(pwd)/.commits"
name="$(pwd)/build.conf"
source $name || exit_msg 1 "no available $name"

case "$1" in
	-v)
		CLEAN_TMPD=y
		DOWNLOAD_METADATA=y
		CLEAN_RESET_LIST=y
		APPLY_PATCH=y
		;;
	-h)
		usage 0
		;;
	-a)
		CLEAN_RESET_LIST=y
		APPLY_PATCH=y
		;;
	-d)
		CLEAN_TMPD=y
		DOWNLOAD_METADATA=y
		;;
	-c)
		CLEAN_TMPD=y
		CLEAN_RESET_LIST=y
		;;
	-r)
		RESTORE_REV=y
		;;
	-t)
		shift
		PATCH_TAG="$1"
		;;
	*)
		usage 1
		;;
esac

[[ "$CLEAN_TMPD" == y ]] && rm -rf $tmpd

[[ "$DOWNLOAD_METADATA" == y ]] && download_metadata

[[ "$CLEAN_RESET_LIST" == y ]] && rm -rf $rfile

if [[ "$APPLY_PATCH" == y ]]; then
	apply_patch
	if [[ -n "$PATCH_TAG" ]]; then
		add_patch_tag $rfile
		echo "add '$PATCH_TAG' for convenience"
	fi
fi

[[ "$RESTORE_REV" == y ]] && restore_oldest_git_revision "$rfile"
