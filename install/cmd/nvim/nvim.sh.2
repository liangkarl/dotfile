#!/usr/bin/env bash
# nvim installer script

lib.add io
lib.add menu
lib.add sys

usage() {
    echo "$(basename $0) [apt | github]"
	exit $1
}

prepare_plugin() {
    local url config_dir
    local pos ver

    # add prerequisites modules
    # NOTE: assume Linux distro is Ubuntu
    ver="$(lsb_release -r | awk '{print $2}')"
    if (( $ver >= 18.04 )); then
        sudo apt install python-neovim
        sudo apt install python3-neovim
    else
        sudo apt install python-dev python-pip python3-dev
        sudo apt install python3-setuptools
        sudo easy_install3 pip
    fi

    # install vim-plug
    config_dir="${XDG_CONFIG_HOME:-$HOME/.local/share}"
    url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    curl -fLo ${config_dir}/nvim/site/autoload/plug.vim --create-dirs $url

    # install fzf
    url='https://github.com/junegunn/fzf.git'
    pos="${config_dir}/fzf"
    git clone --depth=1 $url $pos
    eval ${pos}/install

    nvim +PlugInstall +qa
}

setup_default_editor() {
    local nvim

    nvim="$(type -p ${bin})"
    sudo update-alternatives --install /usr/bin/vi vi ${nvim} 400
    sudo update-alternatives --config vi
    sudo update-alternatives --install /usr/bin/vim vim ${nvim} 400
    sudo update-alternatives --config vim
    sudo update-alternatives --install /usr/bin/editor editor ${nvim} 400
    sudo update-alternatives --config editor
}

github_install() {
    # URL: https://github.com/neovim/neovim
    local url='https://github.com/neovim/neovim'
    local pos="$(mktemp -d)"
    local branch

	# install required packages for github compilation
	case $(os_ver) in
		$OS_UBUNTU)
			sudo apt install ninja-build gettext libtool libtool-bin autoconf \
			               automake cmake g++ pkg-config unzip curl
			;;
		$OS_MAC)
			brew install ninja libtool automake cmake pkg-config gettext curl
			;;
		*)
			;;
	esac
	exit

    # build nvim
    ## choose version
	menu_title "install versions:"
	menu_prompt "select one to continue:"
	menu_default 1
	menu_select 'stable' 'nightly'
	branch=$(menu_choice)

    # remove install dir
    trap "rm -rf $pos" ERR EXIT

    # download git
    git clone --depth=1 -b $branch $url $pos

    ## build nvim
    make -C $pos -j4
    sudo make -C $pos install
}

apt_install() {
    local ver key

    # build nvim
    ## choose version
	menu_title "install ppa versions:"
	menu_prompt "select one to continue:"
	menu_default 1
	menu_select 'stable' 'unstable' 'no-changed'
	ver=$(menu_choice)
    # choose version and add related ppa key
	case $ver in
		stable | unstable)
			key="ppa:neovim-ppa/${ver}"
			trap "sudo add-apt-repository --remove ${key}" ERR

			echo 'add ppa key of $ver nvim'
			sudo add-apt-repository $key
			sudo apt update
			;;
		no-changed)
			echo 'use default neovim package in apt list'
			;;
	esac

    # install neovim
    sudo apt install neovim
}

trap 'pr_err "operation failed ($?)"' ERR
set -eE

bin='nvim'

has_cmd "$bin" && pr_warn "you have install ${bin} already"

if [[ ! -z "$1" ]]; then

	has_cmd "${1}_install" || usage 2

    eval ${1}_install
    exit 0
fi

menu_title "install sources:"
menu_prompt "select one to continue:"
menu_default 4
menu_select 'github' 'apt' 'skip' 'cancel'
src=$(menu_choice)
echo $src

case $src in
	cancel)
		echo "cancel operation"
		exit 0
		;;
	skip)
		echo "skip installization"
		;;
	*)
		eval ${src}_install
esac

# check if install plugin or not
ans=''
read -p "do you want to install prerequisites of plugins? (Y/n) " ans
if [[ "${ans,,}" != 'n' ]]; then
    prepare_plugin
fi

# check if setup default editor or not
read -p "do you want to setup default editor? (Y/n) " ans
if [[ "${ans,,}" != 'n' ]]; then
    setup_default_editor
fi

pr_good "install complete: ${bin}"
